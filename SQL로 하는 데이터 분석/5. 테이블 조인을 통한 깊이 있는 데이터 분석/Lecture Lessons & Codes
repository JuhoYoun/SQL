이전 챕터까지 우리는 코드잇의 쇼핑몰 사이트인 '코팡'에서 쓰일 

    copang_main이라는 데이터베이스의
    member 테이블

을 갖고 SQL을 배웠습니다. 

하지만, 실전에서 여러분은 최소 열 개, 많으면 수 십, 수 백 개의 테이블을 다뤄야할 수도 있습니다. 게다가 이 때 테이블 하나씩을 별도로 다룰 수 있어야할 뿐만 아니라, 테이블 간의 연관 관계를 파악하고 여러 테이블을 하나로 합쳐서 볼 수 있어야 합니다.

여러 테이블을 합쳐서 하나의 테이블인 것처럼 보는 행위를 '조인(join)'이라고 하는데요. 실무에서는 이 조인을 잘해야 제대로된 데이터 분석을 할 수 있습니다. 조인은 그 사람이 SQL을 얼마나 잘 쓰는지 판단하는 척도 중 하나일만큼 정말 중요한 개념인데요.

조인이 구체적으로 무엇인지는 곧 다음 영상에서 설명하겠습니다. 일단 다음 노트의 내용을 따라해서 원래 있던 member 테이블 이외에 또다른 여러 테이블들을 추가하세요. 

참고로, 이번 챕터는 여러분이 이전 챕터들에서 배운 내용을 모두 완벽하게 이해했다고 가정하고 진행됩니다. 혹시 이전 챕터 내용들 중에서 아직 확실하게 이해하지 못한 내용이 있다면 다시 복습하고, 이 챕터를 들으시기 바랍니다. 
----------------------------------------------------------------------------------------------------------------------------------------------------------

이번 챕터에서 여러 테이블을 하나로 합치는 조인(join)을 배울 거라고 했죠? 그럼 일단 여러 테이블들이 있어야할 겁니다. 이번 챕터에서 사용할 테이블들을 생성해볼게요. 이전 노트에서 CSV 파일을 임포트해서 테이블을 생성한 적이 있었는데 기억나시나요? 해당 노트의 내용을 참조해서 여러분 스스로 아래의 CSV 파일 4개를 각각 테이블로 만들어보세요.

item-data.csv -> item 테이블

item-new-data.csv -> item_new 테이블

stock-data.csv -> stock 테이블

review-data.csv -> reivew 테이블

각 테이블에 대해 간단히 설명하자면 다음과 같습니다.

item 테이블 : '코팡'의 상품 정보

item_new 테이블 : (나중 영상에서 설명하겠습니다) 

stock 테이블 : '코팡'의 각 상품 재고 정보

review 테이블 : 고객들이 상품 구매 후 남긴 리뷰 정보

각 테이블은 다음 영상들에서도 등장하니까 그때 또 자세히 설명할게요.

4개의 테이블을 생성하고 나면,

각 테이블의

(1) id 컬럼을 Primary Key로 설정하고, Auto Increment 설정을 해주세요. 

(2) 그리고 날짜를 나타내는 컬럼이 있다면 그 컬럼의 데이터 타입을 DATE으로 변경해주세요.

아래 그림들처럼 말이죠. 
1. item 테이블

2. item_new 테이블(item 테이블과 컬럼 구조가 같은, 같은 종류의 테이블입니다.) 

3. stock 테이블 

4. review 테이블

그리고 각 테이블의 컬럼 속성을 수정하고 나서는 Apply 버튼을 누르는 것, 잊지 마세요! 4개의 테이블이 잘 생성된 분은 다음 영상으로 넘어가시면 됩니다.

*혹시 이렇게 해도 프로그램 에러 발생 등으로 인해 작업을 수행할 수 없는 경우에는, 아래 보이는 SQL 문들을 그대로 Workbench에 복사-붙여넣기해서 실행해주세요. 그럼 똑같은 테이블들이 생성됩니다.
-----------------------------------------------------------------------------------------------------------------------------------------------

*stock 테이블의 item_id 칼럼에는 item 테이블 id 칼럼값이 들어가야한다

Foreign Key / Parent Table / Child Table

이전 영상에서는 stock 테이블의 item_id 컬럼과 item 테이블의 id 컬럼이 갖는 관계를 설명했습니다. 

잠깐 stock 테이블에 있는 row를 하나 선택해볼까요?

row 하나를 선택해서 보면 재고 수(inventory_count)가 195개라는 걸 알 수 있습니다. 

그런데 어떤 상품의 재고수를 나타내는 건지 바로는 알 수 없습니다. 일단 item_id 컬럼의 값인 15를 보고,

item 테이블을 간 다음에 

이렇게 id 컬럼의 값이 15인 row를 찾으면 됩니다. 방금 재고 수 정보는 ‘자수 반팔 티셔츠’라는 상품의 재고 수였네요. 

지금 두 테이블 간의 관계를 한 문장으로 표현하면,

‘stock 테이블의 item_id 컬럼이 item 테이블의 id 컬럼을 참조하는 관계’

라고 할 수 있습니다. 

그리고 지금 item_id 컬럼처럼, '다른 테이블의 특정 row를 식별할 수 있게 해주는 컬럼'을 Foreign Key라고 합니다. 

Foreign Key는 우리말로 외래키라고도 합니다.

바로 이럴 때

(1) 참조를 하는 테이블인 stock 테이블을 ‘자식 테이블’

(2) 참조를 당하는 테이블인 item 테이블을 ‘부모 테이블’

이라고 합니다. 

아래 그림을 잠깐 볼까요?

이때까지 제가 설명한 내용이 한눈에 잘 보이는데요. 지금 자식 테이블의 Foreign Key가 부모 테이블의 Primary Key를 참조하고 있죠? Foreign Key는 다른 테이블의 특정 row를 식별할 수 있어야 하기 때문에 주로 다른 테이블의 Primary Key를 참조할 때가 많습니다. 

이제 Foreign Key가 뭔지 아시겠죠?
-------------------------------------------------------------------------------------------------------------------------------

*stock 테이블에서 item_id 를 item 테이블의 id 칼럼을 참조하는 (reference) foreign key 를 설정하면 item_id 칼럼에 부적절한 값(item 테이블의 id 칼럼에 있는 값 이외의 값)이 들어가는것을 막을 수 있다

Foreign Key 설정 방법
* stock 테이블의 컬럼들을 보는 창을 연다
* 창의 아랫부분에 foreign key 라고 써있는 탭을 연다
* foreign key 설정 자체의 이름을 지정해줘야한다 (Foreign key  /  Referenced Table 라고 되있는 탭창에서)
* Foriegn key 탭 아래에 이름을 지정해준다
* Referenced Table 탭에서 stock 테이블이 참조하는 테이블을 설정해준다
* 오른쪽의 Foreing key details '지정한 foreign key 설정 이름' 아래 Column / Refernced Colunm 에서 참조하는 / 참조되는 칼럼을 설정한다
* Column에 item_id, Referenced Colunm에 id 를 설정해준다
* Apply를 클릭해 설정을 마무리한다

Join
* 여러 테이블을 합쳐서 하나로 보이게 만든다

ex)
SELECT
    item.id
    item.name
    stock.item_id
    stock.inventory_count
FROM item LEFT OUTER JOIN stock
ON item.id = stock.item_id

* LEFT OUTER JOIN : 왼쪽에 있는 item 테이블 기준으로 해서 거기에 stock 테이블을 합치라는 뜻 -> 기준은 아래줄의 ON 에 지시되어 있다 -> item 테이블의 id 값과 stock 테이블의 item.id 값을 비교해서 서로 값이 같은 로우끼리 가로 방향으로 연결하라는 뜻
* SELECT 문 : item 테이블의 id와 name 칼럼과 stock 테이블의 item_id와 inventory_count 칼럼을 보여달라는 뜻
* 위의 sql문을 실행 시 item_id와 inventory_count에 Null이 있는 로우들도 포함된다 -> item 테이블의 id 칼럼값이 stock 테이블의 item_id 칼럼에 존재하지 않는 경우들 -> LEFT OUTER JOIN을 했기 때문에 왼쪽에 있는 item 테이블 기줕으로 테이블이 조인되었기 때문

ex)
SELECT
    item.id
    item.name
    stock.item_id
    stock.inventory_count
FROM item RIGHT OUTER JOIN stock
ON item.id = stock.item_id

* RIGHT OUTER JOIN -> 오른쪽의 stock 테이블 기준으로 테이블이 합쳐진다
* 이 경우 NULL 값이 있는 로우가 없어졌다 -> stock 테이블을 기준으로 하기 때문이다 -> stock 테이블의 모든 item_id 칼럼 값은 item 테이블의 id 칼럼에 존재하기 때문

조인할 때 테이블에 alias 붙이기

ex)
SELECT
    i.id
    i.name
    s.item_id
    s.inventory_count
FROM item AS i LEFT OUTER JOIN stock AS s
ON i.id = s.item_id;
