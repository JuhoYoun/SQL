이전 챕터까지 우리는 코드잇의 쇼핑몰 사이트인 '코팡'에서 쓰일 

    copang_main이라는 데이터베이스의
    member 테이블

을 갖고 SQL을 배웠습니다. 

하지만, 실전에서 여러분은 최소 열 개, 많으면 수 십, 수 백 개의 테이블을 다뤄야할 수도 있습니다. 게다가 이 때 테이블 하나씩을 별도로 다룰 수 있어야할 뿐만 아니라, 테이블 간의 연관 관계를 파악하고 여러 테이블을 하나로 합쳐서 볼 수 있어야 합니다.

여러 테이블을 합쳐서 하나의 테이블인 것처럼 보는 행위를 '조인(join)'이라고 하는데요. 실무에서는 이 조인을 잘해야 제대로된 데이터 분석을 할 수 있습니다. 조인은 그 사람이 SQL을 얼마나 잘 쓰는지 판단하는 척도 중 하나일만큼 정말 중요한 개념인데요.

조인이 구체적으로 무엇인지는 곧 다음 영상에서 설명하겠습니다. 일단 다음 노트의 내용을 따라해서 원래 있던 member 테이블 이외에 또다른 여러 테이블들을 추가하세요. 

참고로, 이번 챕터는 여러분이 이전 챕터들에서 배운 내용을 모두 완벽하게 이해했다고 가정하고 진행됩니다. 혹시 이전 챕터 내용들 중에서 아직 확실하게 이해하지 못한 내용이 있다면 다시 복습하고, 이 챕터를 들으시기 바랍니다. 
----------------------------------------------------------------------------------------------------------------------------------------------------------

이번 챕터에서 여러 테이블을 하나로 합치는 조인(join)을 배울 거라고 했죠? 그럼 일단 여러 테이블들이 있어야할 겁니다. 이번 챕터에서 사용할 테이블들을 생성해볼게요. 이전 노트에서 CSV 파일을 임포트해서 테이블을 생성한 적이 있었는데 기억나시나요? 해당 노트의 내용을 참조해서 여러분 스스로 아래의 CSV 파일 4개를 각각 테이블로 만들어보세요.

item-data.csv -> item 테이블

item-new-data.csv -> item_new 테이블

stock-data.csv -> stock 테이블

review-data.csv -> reivew 테이블

각 테이블에 대해 간단히 설명하자면 다음과 같습니다.

item 테이블 : '코팡'의 상품 정보

item_new 테이블 : (나중 영상에서 설명하겠습니다) 

stock 테이블 : '코팡'의 각 상품 재고 정보

review 테이블 : 고객들이 상품 구매 후 남긴 리뷰 정보

각 테이블은 다음 영상들에서도 등장하니까 그때 또 자세히 설명할게요.

4개의 테이블을 생성하고 나면,

각 테이블의

(1) id 컬럼을 Primary Key로 설정하고, Auto Increment 설정을 해주세요. 

(2) 그리고 날짜를 나타내는 컬럼이 있다면 그 컬럼의 데이터 타입을 DATE으로 변경해주세요.

아래 그림들처럼 말이죠. 
1. item 테이블

2. item_new 테이블(item 테이블과 컬럼 구조가 같은, 같은 종류의 테이블입니다.) 

3. stock 테이블 

4. review 테이블

그리고 각 테이블의 컬럼 속성을 수정하고 나서는 Apply 버튼을 누르는 것, 잊지 마세요! 4개의 테이블이 잘 생성된 분은 다음 영상으로 넘어가시면 됩니다.

*혹시 이렇게 해도 프로그램 에러 발생 등으로 인해 작업을 수행할 수 없는 경우에는, 아래 보이는 SQL 문들을 그대로 Workbench에 복사-붙여넣기해서 실행해주세요. 그럼 똑같은 테이블들이 생성됩니다.
-----------------------------------------------------------------------------------------------------------------------------------------------

*stock 테이블의 item_id 칼럼에는 item 테이블 id 칼럼값이 들어가야한다

Foreign Key / Parent Table / Child Table

이전 영상에서는 stock 테이블의 item_id 컬럼과 item 테이블의 id 컬럼이 갖는 관계를 설명했습니다. 

잠깐 stock 테이블에 있는 row를 하나 선택해볼까요?

row 하나를 선택해서 보면 재고 수(inventory_count)가 195개라는 걸 알 수 있습니다. 

그런데 어떤 상품의 재고수를 나타내는 건지 바로는 알 수 없습니다. 일단 item_id 컬럼의 값인 15를 보고,

item 테이블을 간 다음에 

이렇게 id 컬럼의 값이 15인 row를 찾으면 됩니다. 방금 재고 수 정보는 ‘자수 반팔 티셔츠’라는 상품의 재고 수였네요. 

지금 두 테이블 간의 관계를 한 문장으로 표현하면,

‘stock 테이블의 item_id 컬럼이 item 테이블의 id 컬럼을 참조하는 관계’

라고 할 수 있습니다. 

그리고 지금 item_id 컬럼처럼, '다른 테이블의 특정 row를 식별할 수 있게 해주는 컬럼'을 Foreign Key라고 합니다. 

Foreign Key는 우리말로 외래키라고도 합니다.

바로 이럴 때

(1) 참조를 하는 테이블인 stock 테이블을 ‘자식 테이블’

(2) 참조를 당하는 테이블인 item 테이블을 ‘부모 테이블’

이라고 합니다. 

아래 그림을 잠깐 볼까요?

이때까지 제가 설명한 내용이 한눈에 잘 보이는데요. 지금 자식 테이블의 Foreign Key가 부모 테이블의 Primary Key를 참조하고 있죠? Foreign Key는 다른 테이블의 특정 row를 식별할 수 있어야 하기 때문에 주로 다른 테이블의 Primary Key를 참조할 때가 많습니다. 

이제 Foreign Key가 뭔지 아시겠죠?
-------------------------------------------------------------------------------------------------------------------------------

*stock 테이블에서 item_id 를 item 테이블의 id 칼럼을 참조하는 (reference) foreign key 를 설정하면 item_id 칼럼에 부적절한 값(item 테이블의 id 칼럼에 있는 값 이외의 값)이 들어가는것을 막을 수 있다

Foreign Key 설정 방법
* stock 테이블의 컬럼들을 보는 창을 연다
* 창의 아랫부분에 foreign key 라고 써있는 탭을 연다
* foreign key 설정 자체의 이름을 지정해줘야한다 (Foreign key  /  Referenced Table 라고 되있는 탭창에서)
* Foriegn key 탭 아래에 이름을 지정해준다
* Referenced Table 탭에서 stock 테이블이 참조하는 테이블을 설정해준다
* 오른쪽의 Foreing key details '지정한 foreign key 설정 이름' 아래 Column / Refernced Colunm 에서 참조하는 / 참조되는 칼럼을 설정한다
* Column에 item_id, Referenced Colunm에 id 를 설정해준다
* Apply를 클릭해 설정을 마무리한다

Join
* 여러 테이블을 합쳐서 하나로 보이게 만든다

ex)
SELECT
    item.id,
    item.name,
    stock.item_id,
    stock.inventory_count
FROM item LEFT OUTER JOIN stock
ON item.id = stock.item_id

* LEFT OUTER JOIN : 왼쪽에 있는 item 테이블 기준으로 해서 거기에 stock 테이블을 합치라는 뜻 -> 기준은 아래줄의 ON 에 지시되어 있다 -> item 테이블의 id 값과 stock 테이블의 item.id 값을 비교해서 서로 값이 같은 로우끼리 가로 방향으로 연결하라는 뜻
* SELECT 문 : item 테이블의 id와 name 칼럼과 stock 테이블의 item_id와 inventory_count 칼럼을 보여달라는 뜻
* 위의 sql문을 실행 시 item_id와 inventory_count에 Null이 있는 로우들도 포함된다 -> item 테이블의 id 칼럼값이 stock 테이블의 item_id 칼럼에 존재하지 않는 경우들 -> LEFT OUTER JOIN을 했기 때문에 왼쪽에 있는 item 테이블 기줕으로 테이블이 조인되었기 때문

ex)
SELECT
    item.id,
    item.name,
    stock.item_id,
    stock.inventory_count
FROM item RIGHT OUTER JOIN stock
ON item.id = stock.item_id

* RIGHT OUTER JOIN -> 오른쪽의 stock 테이블 기준으로 테이블이 합쳐진다
* 이 경우 NULL 값이 있는 로우가 없어졌다 -> stock 테이블을 기준으로 하기 때문이다 -> stock 테이블의 모든 item_id 칼럼 값은 item 테이블의 id 칼럼에 존재하기 때문

조인할 때 테이블에 alias 붙이기

ex)
SELECT
    i.id,
    i.name,
    s.item_id,
    s.inventory_count
FROM item AS i LEFT OUTER JOIN stock AS s
ON i.id = s.item_id;

* AS 를 스킵해도 된다
----------------------------------------------------------------------------------------------------------------------

SQL 문 안에서 우리는

컬럼 이름에도 alias를 붙일 수 있고, 

테이블 이름에도 alias를 붙일 수 있습니다.

그리고 둘다 원래 이름 뒤에 AS를 쓰거나, 스페이스 하나를 띄우고 그 뒤에 alias를 쓰면 된다는 점이 같은데요. 

하지만 두 종류의 alias는 약간의 용도 차이가 있습니다. 

일단 컬럼의 alias는 각 컬럼 이름이 실제로 우리에게 그 alias로 변환되어서 보여지게 하기 위한 용도로 쓰입니다. 

이와 달리 테이블의 alias는 조회 결과에서 보기 위한 게 아니라 SQL 문의 전체 길이를 줄여서 가독성을 높이기 위해 사용됩니다. 그리고 특히 조인(join)을 할 때, 만약 서로 다른 테이블에 같은 이름의 컬럼이 존재한다면, SQL 문 안에서 그 컬럼을 가리킬 때 무슨 테이블의 컬럼인지를 더 짧게 표현해주기 위해서도 사용되구요.

예를 들어, 우리가 배운 member 테이블과 item 테이블에는 둘다 gender라는 컬럼이 있었습니다.

이때

(1) 전자는 회원의 성별을 나타내기 위한 컬럼이고,

(2) 후자는 상품이 여성용인지 남성용인지, 혹은 남녀공용인지를 나타내기 위한 컬럼인데

우연히도 컬럼 이름이 같은 건데요. 만약 SELECT 절에서 gender 컬럼을 쓰려면 어느 테이블의 컬럼인지를 쉽게 나타내기 위해 테이블에 alias를 붙여주면 좋습니다.

만약 member 테이블에 m, item 테이블에 i라는 alias를 붙였다면

(1)은 member.gender 대신 m.gender

(2)는 item.gender 대신 i.gender

라고 써주면 됩니다. 

그리고 테이블에 alias를 붙였을 때는 주의할 점이 하나 있습니다.

우리는 FROM 절에서 테이블에 alias를 붙이는데요. 이렇게 한번 alias를 붙였으면, 다른 모든 절에서 그 테이블은 그 alias로만 나타내야 한다는 점입니다. 만약 다른 절에서 alias가 아닌 원래의 테이블 이름을 사용하면 오히려 에러가 나게 됩니다. 


컬럼의 alias와 테이블의 alias, 어떻게 쓰고, 각각 왜 필요한 건지 이제 잘 아시겠죠?
--------------------------------------------------------------------------------------------------------------------------------

INNER JOIN
* 각 테이블에서 조인 기준으로 사용된 컬럼들의 일치하는 값이 둘 다 존재하는 로우들만 합치는 조인
* 기준이 되는 테이블이 따로 없다
* stock 테이블과 item 테이블에서는 stock 테이블의 item_id 값과 item 테이블의 id 값이 일치하는 로우들만 가로로 연결한다
* 위의 예시에서 JOIN으로 인해 생기는 NULL 값을 출력하지 않기 위해 LEFT OUTER JOIN 을 할지 RIGHT OUTER JOIN을 할지 고민하지 않아도 되겠네? -> 기준 칼럼이 NULL이 되는 경우가 없다
* 집합으로 따지면 교집합!

ex)
SELECT
    i.id,
    i.name,
    s.item_id,
    s.inventory_count
FROM item AS i INNER JOIN stock AS s
ON i.id = s.item_id;

--------------------------------------------------------------------------------------------------------------------

이전 영상에서 item 테이블과 stock 테이블을

RIGHT OUTER JOIN한 결과와 INNER JOIN한 결과가 같았습니다. 그 이유는 stock 테이블은 당연히 item 테이블에 존재하는 상품의 재고 수를 담고 있고, item 테이블에 있지 않은 엉뚱한 상품의 재고 수를 담고 있지는 않기 때문에 그랬는데요. 즉, stock 테이블의 item_id 컬럼이 item 테이블의 id 컬럼을 참조하는 Foreign Key였기 때문입니다. 이렇게 Foreign Key를 기준으로 조인하면 하나의 OUTER JOIN(LEFT 또는 RIGHT)의 결과와 INNER JOIN의 결과가 같을 수밖에 없습니다.

하지만 꼭 Foreign Key를 기준으로 조인을 해야만 하는 건 아닙니다. Foreign Key가 아닌 컬럼을 기준으로 해서 조인할 수도 있는데요. 그리고 이렇게 하면 보통

(1) LEFT OUTER JOIN 

(2) RIGHT OUTER JOIN

(3) INNER JOIN 

세 가지 조인의 결과가 모두 달라집니다.

잠깐 다음 두 테이블을 볼까요?

지금 왼쪽의 player 테이블은 축구 선수의 이름과 그 소속팀을 나타내는 테이블이고, 오른쪽의 team 테이블은 각 축구팀이 어느 지역에 속하는지를 나타내는 테이블입니다. 지금 player 테이블의 team 컬럼과 team 테이블의 team_name 컬럼이 서로 연관된 컬럼이라는 게 한 눈에 보이네요.

하지만 player 테이블의 team 컬럼의 값이 반드시 team 테이블의 team_name 컬럼에 존재하는 것은 아닙니다. 지금 보면 dragons, tigers, runaway_team, freestyle이라는 팀은 team 테이블에 없습니다. 그러니까 두 테이블 사이에는 Foreign Key 관계가 없는 겁니다. 그래도 조인은 할 수 있는데요. 

Workbench에서 각 테이블의 모습은 다음과 같습니다.

player 테이블

team 테이블

player 테이블의 team 컬럼과, team 테이블의 team_name 컬럼을 기준으로 해서 두 테이블로 이때까지 배운 3가지 조인을 해보겠습니다.
1. LEFT OUTER JOIN

결과를 보니 지금 선수들의 소속팀 중에 아직 지역 정보가 없는 팀들도 있네요. 지금 SELECT 절 뒤의 컬럼 순서는 여러분의 이해를 돕기 위해 제가 적절하게 조정했습니다.
2. RIGHT OUTER JOIN

지금 superkick이라는 팀에 속한 선수가 2명 있습니다. 그리고 아직 그 소속 선수들의 정보가 player 테이블에 없는 팀도 있네요.
3. INNER JOIN

선수 정보와 팀 정보가 둘다 존재하는 것들이 잘 조회됩니다. 위의 두 OUTER JOIN과는 전혀 다른 결과죠?

자, 정리해볼게요.

이전 영상에서 item 테이블과 stock 테이블을 조인할 때는 RIGHT OUTER JOIN과 INNER JOIN의 결과가 같았지만, 지금 player 테이블과 team 테이블을 조인할 때는 결과가 다르죠?

다시 한번 말하자면, 이전 영상의

stock 테이블의 경우 그 item_id 컬럼이 item 테이블의 id 컬럼을 참조하는 Foreign Key(외래키)였습니다. 즉, item_id 컬럼의 값이 id 컬럼에 반드시 존재할 수밖에 없는 관계였죠.

하지만 player 테이블의 team 컬럼과 team 테이블의 team_name 컬럼은 그런 관계는 아니었구요.

조인을 할 때 보통 Foreign Key를 기준으로 하는 것은 맞지만, 그렇다고 꼭 Foreign Key만을 기준으로 해야하는 것은 아닙니다. 방금처럼 꼭 Foreign Key가 존재하지 않더라도 서로 같은 의미를 나타내는 컬럼들(team 컬럼, team_name 컬럼)을 기준으로 조인하기도 하죠.

꼭 Foreign Key가 아니더라도 서로 연관있는 컬럼을 기준으로 조인을 하는 경우도 많습니다. 이 사실을 꼭 기억하세요.
---------------------------------------------------------------------------------------------------------------------------------

이때까지

(1) LEFT OUTER JOIN / RIHGT OUTER JOIN 

(2) INNER JOIN

을 배웠습니다.

하지만 이것들은 테이블을 합치는 작업의 일부분에 불과합니다. 이번 노트에서는 테이블을 합치는 작업들을 좀더 체계적인 관점에서 배워보겠습니다.

이 노트의 내용을 제대로 이해한다면 여러분의 SQL 사용 능력은 한층 업그레이드될 겁니다. 잘 집중해주세요.

테이블을 합치는 작업을 앞으로 '연산'이라고 표현하겠습니다. 자, 시작해볼게요.

테이블을 합치는 연산은 크게 결합 연산과 집합 연산으로 나눌 수 있습니다.

결합 연산은 테이블을 가로 방향으로 합치는 것에 관한 연산이고,

집합 연산은 테이블을 세로 방향으로 합치는 것에 관한 연산입니다.

그럼 우리가 배운 조인은 이 둘 중 무엇에 해당할까요? 조인은 결합 연산에 해당합니다. 조인의 과정을 하나씩 생각해보세요.

조인은 두 테이블의 각 컬럼을 기준으로 해서 같은 값을 가진 row들을 가로 방향으로 이어붙이는 작업이었죠? 따라서 조인은 결합 연산에 해당합니다.

그렇다면 테이블을 세로 방향으로 합치는 것에 관한 연산인 집합 연산은 뭘까요? 

여러분이 학교에서 수학 시간에 배웠던 집합 개념을 잠깐 떠올려보세요.

아래와 같은 그림을 그려가며 배웠던 적이 있었을 텐데요.

이 그림과 같은 A 집합, B 집합이 있다고 할 때

    c 를 A와 B의 교집합 : A ∩ B
    a 를 A의 차집합 : A - B
    b 를 B의 차집합 : B - A
    (a+b+c) 를 A와 B의 합집합 : A U B

이라는 것을 배우셨을 겁니다.

집합 연산은 테이블 하나를 집합 하나로 보고, 그 안의 각 row를 하나의 원소로 간주하고 진행되는 연산입니다. 예시를 통해 이해해볼게요.

자, 이제 다음과 같이 '회원 정보를 담은 member 테이블' 두 개가 있다고 해봅시다. 

 

두 테이블은 컬럼 구조가 같습니다. 그러니까 두 테이블은 같은 종류의 테이블이라고 할 수 있습니다.

자, 중요한 사실 하나를 알려드릴게요. 집합 연산은 같은 종류의 테이블들끼리만 가능합니다. 

왜 그럴까요? 테이블의 row 하나하나를 집합에서 말하는 하나의 원소라고 생각해보세요. 만약 같은 종류의 테이블이 아니면 row의 컬럼 구조가 다르기 때문에 각 원소가 서로 동질한 원소라고 할 수 없고, 그럼 애초에 집합 연산을 수행할 수 없습니다.

지금

member_A 테이블을 A 집합, member_B 테이블을 B 집합이라고 생각했을 때, 집합 관점에서 각 영역을 표현하면 다음과 같습니다.
(1) A ∩ B

(2) A - B

(3) B - A


(4) A U B

각 영역의 결과가 왜 위와 같이 표현되는지 이해되시나요? 방금 전에 말했듯이 두 테이블의 각 row를 하나의 원소로 보고 생각하면 이해하기 쉽습니다.

SQL에서도 이런 집합 연산이 가능합니다. 바로 이런 식으로 말이죠.
(1) A ∩ B (INTERSECT 연산자 사용)

SELECT * FROM member_A 

INTERSECT 

SELECT * FROM member_B
(2) A - B (MINUS 연산자 또는 EXCEPT 연산자 사용)

SELECT * FROM member_A 

MINUS

SELECT * FROM member_B
(3) B - A (MINUS 연산자 또는 EXCEPT 연산자 사용)

SELECT * FROM member_B

MINUS

SELECT * FROM member_A
(4) A U B (UNION 연산자 사용)

SELECT * FROM member_A

UNION

SELECT * FROM member_B

(*합집합을 나타낼 때, 두 집합이 공통적으로 갖고 있는 원소(교집합에 속하는 원소들)는 중복을 제거하고 하나만 표시됩니다. 같은 원리로 UNION 연산자도 두 테이블에 공통적으로 존재하는 row는 하나만 결과에 표시하는데요. 다음 영상과 노트에서 한 번 더 나오는 내용이니까 잘 기억해두세요)  

이런 식으로 두 테이블 간에 집합 연산을 할 수 있고 그 결과는 각각 위에서 본 그림과 같습니다.

하지만 안타까운 점이 하나 있습니다. 그건 바로 위의 3가지 집합 연산자들(INTERSECT, MINUS, UNION) 중에서 MySQL에서는 버전 8.0 기준으로 UNION 연산자만 지원한다는 점인데요.(다른 DBMS인 오라클에서는 3가지 연산자 모두를 지원합니다.)

그럼 MySQL에서는 INTERSECT, MINUS 연산은 포기해야하는 걸까요? 비록 이런 집합 연산자를 바로 사용할 수는 없지만 우리가 배운, 결합 연산에 해당하는 조인을 사용해서 간접적으로 원하는 결과를 얻을 수 있는데요. 그 방법을 다음 영상에서 살펴보겠습니다.

그 전에 일단 여러분께서는 이 노트의 내용을 완벽하게 이해해주세요!
----------------------------------------------------------------------------------------------------------------------

같은 종류의 테이블 조인하기

ex)
SELECT
    old.id AS old_id,
    old.name AS old_name,
    new.id AS new_id,
    new.name AS new_name
FROM item AS old LEFT OUTER JOIN item_new AS new
ON old.id = new.id;

-> item 테이블에는 있지만 item_new 테이블에 없는 로우들을 식별 가능하다 -> new_id와 new_name이 NULL이다


ex)
SELECT
    old.id AS old_id,
    old.name AS old_name,
    new.id AS new_id,
    new.name AS new_name
FROM item AS old RIGHT OUTER JOIN item_new AS new
ON old.id = new.id;

-> item_new 테이블에만 있고 item 테이블에는 없는 로우들을 식별 가능

ex)
SELECT
    old.id AS old_id,
    old.name AS old_name,
    new.id AS new_id,
    new.name AS new_name
FROM item AS old RIGHT OUTER JOIN item_new AS new
ON old.id = new.id
WHERE old.id IS NULL;

-> item_new 에만 있는 로우들만 출력

ex)
SELECT
    old.id AS old_id,
    old.name AS old_name,
    new.id AS new_id,
    new.name AS new_name
FROM item AS old INNER JOIN item_new AS new
ON old.id = new.id;

-> 두 테이블 모두 공통으로 가지고 있는 로우들만 출력

ex)
SELECT * FROM item
UNION
SELECT * FROM item_new;

-> 집합 연산 -> 두 테이블에 있는 모든 로우들을 세로로 출력 -> 공통의 로우들은 한번만 출력된다
------------------------------------------------------------------------------------------------------------------------------------

우리는 이때까지 join의 조건을 설정할 때 ON 절을 사용했습니다.

그런데 조인 조건을 나타낼 때 다른 방법을 쓰는 것도 가능합니다.

만약 조인 조건으로 쓰인 두 컬럼의 이름이 같으면 ON 대신 USING을 쓰는 경우도 있습니다.

잠깐 아래 SQL 문을 볼까요? 지금 item 테이블과 item_new 테이블을 INNER JOIN하고 있고, 그 조인 조건은 ON old.id = new.id 입니다.

이제 조인 조건을 나타낼 때 ON이 아니라 USING을 사용한 SQL 문을 살펴볼게요.

USING이라는 부분이 보입니다. 지금 저는 item 테이블의 id 컬럼과 item_new 테이블의 id 컬럼을 기준으로 조인하고 있는데요. 두 컬럼의 이름이 같죠? 이렇게 두 테이블에서 조인 조건으로 사용되는 컬럼들의 이름이 같으면 그냥 USING이라고 쓰고 그 안에 컬럼 이름을 쓰는 것도 허용됩니다.

그러니까 지금 이 상황에서는 ON old.id = new.id 와 USING(id)의 의미는 같은 겁니다.

혹시 앞으로 조인을 하는 SQL 문에서 ON 대신 USING을 발견하더라도 당황하지 마세요.

ex)
SELECT
    old.id AS old_id,
    old.name AS old_name,
    new.id AS new_id,
    new.name AS new_name
FROM item AS old LEFT OUTER JOIN item_new AS new
USING(id);
----------------------------------------------------------------------------------------------------------------------------------------------

이전 영상 후반에서 두 테이블의 합집합을 구해주는 집합 연산자인 UNION을 배웠습니다. UNION에 관해서 알아두면 좋은 2가지 사실이 있는데요. 하나씩 살펴볼게요. 
1. 서로 다른 종류의 테이블도, 조회하는 컬럼을 일치시키면 집합 연산이 가능합니다. 

다음과 같은 두 테이블이 있습니다. 

Summer_Olympic_Medal : 국가별 하계 올림픽 메달 수 테이블

Winter_Olympic_Medal : 국가별 동계 올림픽 메달 수 테이블 

Summer_Olympic_Medal 테이블

이 테이블에는 id(Primary Key), nation(국가), count(메달 수), year(올림픽 개최 연도) 컬럼이 있습니다. 

Winter_Olympic_Medal 테이블 

이 테이블에는 id(Primary Key), nation(국가), count(메달 수), location(올림픽 개최 도시), first_rank_count(메달 획득 1위 국가의 메달 수) 컬럼이 있습니다. 

저는 두 테이블을 UNION 연산해서 각 국가의 메달 획득 수를 한 눈에 보고 싶습니다. 

하지만 이전에 배웠던 것처럼 컬럼 구조가 같은 테이블끼리만 UNION 연산을 할 수 있는데요. 

지금 상태에서 바로 UNION 연산을 하면 

이렇게 에러가 나는 것을 볼 수 있습니다. 에러 메시지를 보면 두 테이블의 컬럼 수가 다르다는 메시지가 보입니다. 컬럼 구조가 달라서 UNION 연산이 실패한 거죠.

하지만 방법이 있습니다. SELECT 절 뒤의 * 부분을 두 테이블이 공통적으로 갖고 있는 컬럼 이름들로 바꿔주면 됩니다. 

위 그림에서 *(별표) 부분들을 두 테이블의 공통 컬럼들인 id, nation, count로 바꿔주고 실행하면,

이렇게 두 테이블의 해당 컬럼들만을 대상으로 UNION 연산이 된 것을 볼 수 있습니다. 방금 본 것처럼 두 테이블의 원래 컬럼 구조가 달라도, 두 테이블이 공통적으로 갖고 있는 컬럼들만 조회한 경우에는 UNION 같은 집합 연산을 수행할 수 있다는 사실, 잘 기억하세요. 

(총 컬럼의 수와, 각 컬럼의 데이터 타입만 일치하면 UNION 연산이 가능합니다)
2. UNION 과 UNION ALL 

그런데 합집합을 구해주는 UNION에는 특징이 하나 있습니다. 

그건 바로, UNION은 두 테이블이 공통적으로 갖고 있는 원소들, 그러니까 두 테이블의 교집합에 해당하는 영역의 row들은 중복을 제거하고, 그냥 딱 하나의 row만 보여준다는 겁니다. 이것이 UNION의 특징인데요. 

방금 전 두 올림픽 메달 테이블을 잠깐 볼까요? 

지금 보니까 C 국가는 2016 하계 올림픽에서 9개의 메달을, 어떤 동계 올림픽에서도 9개의 메달을 획득했네요. 우연히도 획득한 메달 수가 같군요. 이 둘은 별개의 데이터입니다. 하지만 우리는 지금 빨간색 박스 영역까지의 컬럼들만을 조회했기 때문에 UNION은 이 두 row를 서로 같은 것으로 판단합니다.

그리고 UNION 연산자는 방금 전 말한대로 중복을 제거하고 하나의 row만 보여줄 겁니다. UNION 연산의 결과를 보면, 

겹치는 두 개의 row 중 하나만 표시했다는 것을 알 수 있습니다. 

그런데 이렇게 보는 것은 정확한 결과가 아닙니다. 정보가 누락되어 버렸는데요. 이 상황에서는 겹치는 row도 다 그대로 보여주는 것이 맞습니다. 

이럴 때는 UNION 말고 UNION ALL이라는 연산자를 사용하면 됩니다. UNION ALL은 UNION처럼 두 테이블의 합집합을 보여준다는 점은 같습니다. 하지만 겹치는 것을 중복 제거하지 않고, 겹치는 것들을 그대로 둘다 보여준다는 차이점이 있죠. 이번에는 UNION 대신 UNION ALL 연산을 해보겠습니다. 

결과를 보니 두 테이블 간 겹치는 row들이 둘다 잘 보입니다. 이제 누락되는 정보는 없네요. 

방금 본 것처럼 UNION 연산과 UNION ALL 연산은 둘다 합집합을 구하되, 전자는 중복을 제거해서 보여주고, 후자는 그런 작업없이 두 테이블을 합친 결과를 그대로 보여준다는 차이가 있습니다. 

만약 중복을 제거하고 깔끔하게 보는 것이 중요한 경우에는 UNION 연산자를 사용하고, 중복을 제거하게 되면 정보 누락이 발생할 수 있는 경우에는 UNION ALL 연산자를 사용하면 되겠죠? 여러분의 상황에 따라 적합한 연산자를 사용하시면 됩니다. 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

서로 다른 세개의 테이블 조인하기

SELECT 
    i.name, i.id,
    r.item_id, r.star, r.comment, r.mem_id,
    m.id, m.email
FROM
    item AS i LEFT OUTER JOIN review AS r
        ON r.item_id = i.id
    LEFT OUTER JOIN member AS m
        ON r.mem_id = m.id;

* item 테이블과 review 테이블을 조인한 결과로 나온 테이블을 다시 member 테이블과 조인한다
* 테이블 구성상 review 테이블은 item_id, mem_id 두개의 foreign key를 가질 수 있다. 단 foreign key 설정을 안해도 조인은 가능하다
----------------------------------------------------------------------------------------------------------------------------
item, review, member 이 세 테이블의 조인 과정에 관해서 알아야할 두 가지 사실을 설명해드리겠습니다.
1. 두 개의 테이블을 참조하는 review 테이블

잠깐 이전 영상에서 등장한 review 테이블을 살펴볼까요?

review 테이블의 각 컬럼에 대해 다시 한번 정리해보겠습니다. 

id 컬럼 : Primary Key

mem_id 컬럼 : member 테이블의 id 컬럼을 참조하는 컬럼(어느 회원이 남긴 리뷰인지 확인 가능)

item_id 컬럼 : item 테이블의 id 컬럼을 참조하는 컬럼(무슨 상품에 관해 남긴 리뷰인지 확인 가능)

star 컬럼 : 회원이 준 별점

comment 컬럼 : 회원이 남긴 댓글 

이렇게 5개의 컬럼들이 있습니다. 

여기서 중요한 사실은

review 테이블이 member 테이블도 참조하고 있고, item 테이블도 참조하고 있다는 점입니다. 아래와 같이 말이죠.

(1) review(mem_id 컬럼) -> member(id 컬럼)

(2) review(item_id 컬럼) -> item(id 컬럼) 

그러니까

리뷰 하나가 있을 때, 누가 남겼는지 알고 싶으면 mem_id 컬럼을 통해 member 테이블을 참조하고, 어떤 상품에 관한 리뷰인지 알고 싶으면 item_id 컬럼을 통해 item 테이블을 참조하면 됩니다.

그리고 이것들을 한번에 보려면 이전 영상처럼 세 테이블을 모두 조인하면 되구요.

실무에서 방금 본 review 테이블처럼, 한 개 이상의 다른 테이블을 참조하는 테이블을 만나게 되더라도 당황하지 마세요.
2. 1:1 관계 , 1:n 관계

이전 영상에서 했던 세 테이블의 조인 결과를 보면, 아래 그림과 같습니다.

그런데 지금 가장 왼쪽에 동일한 상품 이름이 여러 번 등장하는 것을 볼 수 있죠? 왜 그런 걸까요? 

이 부분이 자연스럽게 이해되지 않는 분들을 위해 설명하겠습니다. 

현재 각 테이블은 다음 개체의 정보들을 나타내고 있습니다. 

item - 상품 / review - 리뷰 / member - 회원

여기서 잠깐, '상품' 과 '리뷰'의 관계를 생각해봅시다. 하나의 상품에는, 여러 개의 리뷰가 달릴 수 있는데요. 이런 걸 1:n 관계라고 합니다. 그래서 item 테이블을 기준으로 review 테이블을 LEFT OUTER JOIN하면 하나의 상품에 여러 개의 리뷰를 연결해서 표현해줘야 합니다. 그래서 위 그림처럼 하나의 상품에 대해서, 그 id 값과 일치하는 item_id 값을 가진 리뷰라면 모두 연결이 되어, 동일한 상품 이름이 여러 번 표시된 것입니다.

이 모습은 이전 영상에서 우리가 item 테이블과 stock 테이블을 조인했을 때와는 조금 다른 모습인데요. 그 때는 하나의 상품이, 한 건의 재고 수 정보를 갖는 1:1 관계였기 때문에 동일한 상품 이름이 여러 번 등장하는 일은 없었습니다. 하지만 '상품'과 '리뷰'처럼 1:n 관계인 경우에는 조인을 할 때 1:n 중 1에 해당하는 테이블의 row는 위 그림처럼 조인 결과에서 여러 번 중복 등장할 수 있게 되는 겁니다.

왜 위 그림처럼 같은 상품 이름이 여러 번 등장했는지 아시겠죠?
----------------------------------------------------------------------------------------------------------------------------

의미 있는 데이터 추출하기

SELECT i.id, i.name, AVG(star)
FROM
    item AS i LEFT OUTER JOIN review AS r
        ON r.item_id = i.id
    LEFT OUTER JOIN member AS m
        ON r.mem_id = m.id
WHERE m.gender = 'f'
GROUP BY i.id, i.name
ORDER BY AVG(star) DESC;

-> 여성 회원이 리뷰를 작성한 상품들을 

SELECT i.id, i.name, AVG(star), COUNT(*)
FROM
    item AS i LEFT OUTER JOIN review AS r
        ON r.item_id = i.id
    LEFT OUTER JOIN member AS m
        ON r.mem_id = m.id
WHERE m.gender = 'f'
GROUP BY i.id, i.name
HAVING COUNT(*) > 1
ORDER BY 
    AVG(star) DESC
    COUNT(*) DESC;

-> 각 상품에 달린 리뷰 개수 볼수 있게 수정 -> 평점이 얼마나 신뢰도 있는가 볼 수 있다 -> 리뷰 두개 이상인 그룹들만 필터링 -> 신뢰도 있는 평점만 걸러낸다 -> 정렬 시 같은 평점이면 리뷰수가 많은게 먼저 오도록 설정

------------------------------------------------------------------------------------------------------------------------------------------------------

이때까지 배운 내용을 한번 정리해볼까요?

두 테이블을 서로 합치는 연산에는 크게 두 가지 종류가 있다고 했습니다. 

첫 번째는 두 테이블을 가로 방향으로 합치는 것에 관한 결합 연산, 

두 번째는 두 테이블을 세로 방향으로 합치는 것에 관한 집합 연산 

이라고 했는데요. 

결합 연산 중에서는 LEFT OUTER JOIN, RIGHT OUTER JOIN, INNER JOIN 

집합 연산 중에서는 INTERSECT, MINUS, UNION, UNION ALL

을 배웠습니다. 이때 집합 연산 중 INTERSECT, MINUS 연산자는 MySQL에서 지원하지 않아서, 조인을 통해 간접적으로 원하는 결과를 얻었던 거, 기억나시죠?  

이번 노트에서는 우리가 배우지 않았던 조인 종류들을 배워보겠습니다. 이전에 배운 것들에 비해 실무적으로 활용도는 떨어지지만, 알아두고 있으면 좋은 내용이라서 소개하겠습니다. 혹시라도 현장에서 일을 하다가 이번 노트에서 나온 조인을 들었는데 모르는 상태면 안 될 테니까요. 

하나씩 순서대로 소개하겠습니다. 
1. NATURAL JOIN

아래와 같이 축구 선수 정보가 담긴 player 테이블과 축구팀 정보가 담긴 team 테이블이 있다고 해봅시다. 

지금 두 테이블에는 team_name이라는, 같은 이름의 컬럼이 있는데요. 이 두 컬럼을 기준으로 조인을 하면 축구 선수가 속한 축구팀과 축구팀의 기반 지역을 한눈에 볼 수 있을 것 같습니다. 두 테이블을 INNER JOIN 해보겠습니다. 

우리가 예상한 대로 조인이 잘 됩니다. 

그런데 이런 식의 조인도 가능합니다. 

FROM player AS p NATURAL JOIN team AS t;

저는 INNER JOIN이라고 쓴 부분을 NATURAL JOIN으로 바꾸었고, 조인 조건을 나타내는 ON 절을 아예 삭제해버렸는데요. NATURAL JOIN이 뭘까요? NATURAL JOIN은 두 테이블에서 같은 이름의 컬럼을 찾아서 자동으로 그것들을 조인 조건을 설정하고, INNER JOIN을 해주는 조인입니다. 우리말로는 자연 조인이라고도 하는데요.

이때까지 조인을 할 때마다 조인 조건을 설정했던 것과는 달리 NATURAL JOIN은 조인 조건을 자동으로 설정해주기 때문에 ON 절을 쓸 필요가 없습니다. 단어 뜻 그대로 별도의 조인 조건 설정 없이, 자연스럽게 진행되는 조인인 거죠. 

사실 두 테이블에 같은 이름의 컬럼이 있더라도 NATURAL JOIN을 쓰기보다는 우리가 배운 조인을 쓰고 ON 절에 조인 조건을 명시해주는 것이 좋습니다. NATURAL JOIN을 해버리면 SQL 문을 보더라도, 테이블 구조를 모르는 사람이라면 어떤 컬럼들을 기준으로 조인이 될지 알 수 없으니까요. 하지만 NATURAL JOIN이 사용된 SQL 문을 만나게 되면, 해석할 수 있어야하기 때문에 알려드리는 겁니다.  

2. CROSS JOIN 

CROSS JOIN은 한 테이블의 하나의 row에 다른 테이블의 모든 row들을 매칭하고, 그 다음 row에서도 또, 다른 테이블의 모든 row들을 매칭하는 것을 반복함으로써 두 테이블의 row들의 모든 조합을 보여주는 조인입니다. 잠깐 아래 그림을 보세요.

지금 member 테이블과 stock 테이블을 CROSS JOIN 했습니다. 

SELECT * member CROSS JOIN stock;

그랬더니

codeit@naver.com 회원을 나타내는 row에 stock 테이블의 모든 row들이 매칭되어서 표시되었죠? 그리고 그 아래에는 또 그 다음 회원에 대해서 같은 작업을 한 결과가 표시되고, 그 다음에는 또 그런 결과가 표시되는 식으로 해서 두 테이블의 row들의 모든 조합이 표시됩니다. 테이블 하나를 잠깐 하나의 집합이라고 생각해봅시다. 그럼 각 row는 하나의 원소가 되겠죠? 방금처럼 두 집합의 모든 원소들의 조합을 나타내는 것을 수학의 집합 이론에서는 카르테시안 곱(Cartesian Product)이라고 하는데요. CROSS JOIN은 두 테이블의 Cartesian Product를 구하는 조인인 겁니다. 

이 CROSS JOIN은 어떤 경우에 사용할 수 있을까요? 예를 들어, 여러 종류의 의류들 중에서도 상의들의 정보가 담긴 테이블, 하의들의 정보가 담긴 테이블이 있다고 해봅시다. 이때, 옷을 입을 때의 상-하의 조합들을 한눈에 보고싶은 경우에 CROSS JOIN을 사용하면 되겠죠? 하지만 일반적인 경우에는 잘 쓸 일이 없는 종류의 조인이기는 합니다. 

3. SELF JOIN 

SELF JOIN은 조인 방식에 있어서 새로운 조인은 아닙니다. SELF JOIN은 셀프라는 단어의 뜻 그대로 테이블이 자기 자신과 조인을 하는 경우를 말합니다. SELF JOIN이라고 해서 헷갈릴 필요는 없습니다. 그냥 서로 별개인 두 테이블을 조인하는 것처럼 생각하시면 되는데요. 어떤 경우에 이런 조인이 필요할까요? 아래 그림을 보세요. 

SELECT * FROM member AS m1 LEFT OUTER JOIN member AS m2
ON m1.age = m2.age;

지금 저는 member 테이블을 SELF JOIN 하고 있습니다. 지금 같은 테이블이기 때문에 그 이름 구별을 하기 위해서 각각 다른 alias(m1, m2)를 주었습니다. 그리고 두 테이블의 age 컬럼을 조인 기준으로 해서 LEFT OUTER JOIN을 했죠? 그 결과를 보니 어떤가요. 

지금 각 회원마다 자신과 동갑인 다른 회원들(본인 포함)이 함께 출력되는 것을 알 수 있습니다. 예를 들어 codeit@naver.com 회원이 지금 28살인데 동갑인 회원으로 captainGOGO03@~, pooh_man@~ 회원이 있다는 것을 알 수 있네요. 이렇게 SELF JOIN을 통해 하나의 테이블 안에서 다양한 정보들을 추출해볼 수 있습니다.

또다른 예시를 살펴볼까요?

지금 보면 employee라는 테이블에 id(Primary key), name(직원의 이름), department(소속 부서), boss(직속 상사의 id 값) 컬럼이 있습니다. 지금 boss 컬럼의 값들은 결국 같은 테이블의 id 컬럼에 있는 값들 중 하나인데요. 어떤 직원의 직속 상사도 당연히 그 회사의 직원일 테니까 당연한 겁니다.

이 상태에서 잠깐 SELF JOIN을 해볼게요. 

employee 테이블의 boss 컬럼과 id 컬럼을 기준으로 LEFT OUTER JOIN인 SELF JOIN을 했더니 각 직원 옆에 직속 상사 정보도 함께 뜨죠? 

이 결과에서 같은 방식으로 한번 더 SELF JOIN을 해볼게요. 

LEFT OUTER JOIN인 SELF JOIN을 한번 더 하니까, 한 직원의, 직속 상사의, 직속 상사까지도 볼 수가 있습니다. 결과를 보니 경영관리부의 '서종민'이라는 분이 CEO인 것 같네요. 직속 상사 정보가 없고, 다른 직원들 입장에서 가장 멀리 있는 직속 상사인 걸 보니까 말이죠. 

방금 본 것처럼 SELF JOIN은 조인 방식에 있어서 뭔가 새로운 조인은 아닙니다. 다만, 조인 대상이 같은 테이블을 마치 별도의 테이블인 것처럼 간주하고 진행된다는 점에서 특색이 있는 조인인데요. 

방금 보신 것처럼 SELF JOIN을 하면 하나의 테이블에 담긴 데이터를 다양한 관점에서 바라볼 수 있게 됩니다. 

SELECT *
FROM employee AS e1 LEFT OUTER JOIN employee AS e2
ON e1.boss = e2.id
LEFT OUTER JOIN employee AS e3
ON e2.boss = e3.id;

4. FULL OUTER JOIN 

FULL OUTER JOIN은 뭘까요? 우리는 LEFT OUTER JOIN과, RIGHT OUTER JOIN을 배웠습니다. 둘다 왼쪽이나 오른쪽에 있는 테이블 하나를 기준으로 두고 상대 테이블을 조인하는 거였죠? 

FULL OUTER JOIN은 두 테이블의 LEFT OUTER JOIN 결과와 RIGHT OUTER JOIN 결과를 합치는 조인입니다. 대신, 이때 두 결과에 모두 존재하는 row들(두 테이블에 공통으로 존재하던 row들)은 한번만 표현해주죠.

위에서 Natural Join을 배울 때 봤던 이 두 테이블을 FULL OUTER JOIN 해보겠습니다. 

위 SQL 문, 이해되시나요? 지금 하늘색 영역이 LEFT OUTER JOIN 부분이고, 그 결과입니다. 그리고 빨간색 영역이 RIGHT OUTER JOIN 부분이고, 그 결과이구요. 이 둘을 UNION ALL한 결과인데요. 두 결과가 그대로 잘 합쳐졌습니다. 그런데 지금 이 결과를 보면 

서로 겹치는 row들이 보입니다. id 컬럼을 보면 개수가 2개인 row들이 보이는데요. 이런 중복 row들은 제거하고 하나만 보이도록 해볼게요. 어떻게 하면 될까요? 이전 노트에서 배운대로 UNION ALL 대신 UNION을 사용하시면 됩니다. 

그럼 이렇게 중복이 제거된 결과가 나타납니다. 이 결과가 바로 FULL OUTER JOIN의 결과인데요. 앞으로 FULL OUTER JOIN이라는 말을 들으면 방금 전 설명을 기억하세요. 

참고로, Oracle이라는 DBMS에서는 FULL OUTER JOIN을 바로 할 수 있도록 해주는 연산자가 내장되어 있습니다. 그래서 

SELECT * 
FROM player AS p FULL OUTER JOIN team AS t
ON p.team_name = t.team_name;

이라고만 써도, 위와 같은 결과를 볼 수 있습니다. 

5. Non-Equi 조인 

자, 마지막으로 이때까지 우리가 살펴봤던 조인과는 전혀 다른 성격의 조인을 살펴보겠습니다. 이때까지 우리는 조인 조건을 설정할 때 두 컬럼의 값이 같은지를 기준으로 했습니다. 즉, 조인 조건에 항상 등호(=)를 사용해왔죠. 

그런 조인들은 Equi 조인이라고 합니다. Equi는 Equality Condition의 줄임말로 동등 조건을 의미합니다. 이때까지 우리가 해온 조인은 모두 동등 조건을 판단하는 Equi 조인이었습니다. 

하지만 동등 조건이 아닌 다른 종류의 조건을 사용해서 조인을 할 수도 있는데요. 이런 조인을 Non-Equi 조인이라고 합니다. 바로 그 예를 보여드릴게요. 

지금 저는 member 테이블과 item 테이블을 LEFT OUTER JOIN 했습니다. 그런데 ON 뒤의 조인 조건을 보니 뭔가 좀 이상하죠? 등호가 아니라 부등호(<)가 들어있는데요. 

실행결과를 보면 member 테이블의 sign_up_day(회원의 사이트 가입일)보다 더 이후인 registration_date(상품이 사이트에 등록된 날)을 가진 item들이 연결되었습니다. 이 결과를 보면, 특정 회원이 가입한 이후에 사이트에 올라온 상품들이 무엇인지 확인할 수 있는데요. 좀더 스크롤을 내려볼게요.

지금 가장 최근에 가입한 두 회원 이후로는 새롭게 사이트에 올라온 상품들은 없는 상태라는 걸 알 수 있습니다. 2019년 11월 23일 이후로는 사이트에 새롭게 올라온 상품들이 없네요. 

Non-Equi 조인이 뭔지 잘 이해되시나요? 사실 Non-Equi 조인은 Equi 조인만큼 보편적으로 사용되지는 않지만 방금 본 것처럼 특정 조건에서는 충분히 유용하게 사용될 수 있는 조인이기 때문에 알아두시는 게 좋습니다. 그리고 Non-Equi 조인에서는 방금 본 부등호 말고도 다양한 조건 표현식이 사용될 수 있는데요. 이 부분은 Non-Equi 조인이라고 검색해서 직접 찾아보시길 추천합니다.

이제 Non-Equi 조인이라는 게 있다는 걸 알게 됐으니까, 나중에 ON절에서 등호(=)가 없는 조건 표현식을 보더라도 당황하지 마세요!  
