SELECT : 테이블의 데이터를 조회할 때 사용
SELECT * : 각 로우의 모든 칼럼 값을 보여줘라
SELECT email, age, address : email age address 칼럼만 보여줘라
FROM : 어느 테이블에서 부터 데이터를 조회해야하는지~
copang_main.member : copang_main이라는 데이터베이스의 member라는 테이블 -> member라고만 해도 되지만 서로 다른 데이터베이스트 안에 같은 이름을 가진 테이블이 있는 경우를 생각해서 데이터베이스까지 써줬다
WHERE : 특정 조건만 만족하는 로우들만 조회할 때 쓴다
WHERE email = 'taehos@hanmail.net' -> 특정 이메일 값을 가지고 있는 로우만 출력
WHERE age NOT BETWEEN 30 AND 39 -> 나이가 30과 39 사이에 있지 않은 로우만 출력

-----------------------------------------------------------------------------------------------------------------------------------------------
1. SQL 문 끝에는 항상 세미콜론을 써줘야합니다. 

하나의 SQL 문 끝에는 세미콜론을 써줘야합니다. SQL 문법 상 세미콜론이 하나의 SQL 문을 종결하는 단위이기 때문에 그런 건데요. 간혹 이 세미콜론을 쓰는 것을 잊고 '왜 이 SQL 문이 실행되지 않지?'라고 고민하시는 분들이 있습니다. SQL 문의 끝에는 세미콜론! 절대 잊지마세요.

(Workbench에서는 하나의 SQL 문인 경우 세미콜론을 입력하지 않아도 알아서 인식하고 잘 실행해줍니다. 하지만 Workbench에서도 하나 이상의 SQL 문들이 있는데 세미콜론이 없으면 그 SQL 문들은 실행되지 않습니다)

2. SQL 문 안에는 공백이나 개행 등을 자유롭게 넣을 수 있습니다. 

예를 들어 이런 식으로 엄청 많은 공백을 주거나,

SQL 문의 일부분을 한 줄 내리고, 탭을 입력한 후에 쓰는 것도 가능합니다. 

어떤 방식으로 쓰든, 구분되어야할 키워드들이 최소한 하나 이상의 공백으로 구분되어 있고, 세미콜론으로 마무리되어 있으면 실행에는 문제가 없습니다. 이런 점을 이용해서 길이가 긴 SQL 문을 쓸 때는 개행(줄바꿈), 탭 등을 적절하게 활용해서 가독성을 높이는 것이 좋습니다. 
3. SQL 문의 대소문자 구분 문자

이전 영상에서 마지막에 썼던 SQL 문을 보면, MySQL에 기본으로 내장된 키워드들(이런 것들을 보통 ‘예약어’라고 합니다.)은 대문자로 써주고, 나머지 부분은 소문자로 써줬습니다. 

지금 빨간색 박스가 MySQL에 원래부터 존재하는 예약어, 파란색 박스가 사용자가 지정한 부분입니다.

일단 빨간색 박스에서 보이는 것처럼 MySQL의 예약어는 대문자로 적는 것이 관례이고, 보기에도 좋습니다.

그리고 파란색 부분에 등장하는 데이터베이스 이름, 테이블 이름, 컬럼 이름 등은 대소문자를 가리지 않고, 실제로 존재하는 것의 이름을 적어주면 됩니다. 

데이터베이스, 테이블, 컬럼 등의 이름을 짓는 것도 회사마다 일종의 규약(convention)들이 있을 텐데요. 실무에서는 그런 규약에 맞게 지어진 이름들을 자주 작성하게 되겠죠?

빨간색 박스로 표시된 ‘예약어’들은 꼭 이렇게 대문자로만 써야할까요? 그건 아닙니다. ‘예약어’들을 모두 소문자로 바꾸고 실행해도

위 그림과 같이 실행은 잘 됩니다. 하지만 가독성을 위해 ‘예약어’만큼은 꼭 대문자로 쓰는 습관을 들이도록 하세요.    
4. 데이터베이스 이름과 테이블 이름

이전 영상에서는 데이터베이스 이름 뒤에 점(.)을 붙이고 그 다음에 테이블 이름을 썼습니다. 이렇게 쓰면 해당 데이터베이스 안의 테이블을 가리키는 거라고 했죠? 실무에서는 서로 다른 데이터베이스에, 같은 이름의 테이블이 존재할 수도 있기 때문에 이렇게 써주는 게 좋다고 했는데요. 

하지만 항상 그럴 필요는 없습니다. 아래 그림을 보세요. 

지금 왼쪽 SCHEMAS 패널 부분의 copang_main을 클릭해서, 활성화해두었습니다. 이건 지금 copang_main 데이터베이스를 사용할 거라고 지정한 것과 같은데요. 이런 상태에서는 그냥 member 라고 테이블 이름만 적어줘도 됩니다. 

또는 아예 SQL 문으로 어떤 데이터베이스를 쓰겠다고 확실하게 정하는 것도 가능합니다. 

위 그림의 USE copang_main; 은 copang_main이라는 데이터베이스를 사용하겠다고 확실히 선언하는 것입니다. 그리고 그 뒤로는 그냥 테이블 이름만 써도 괜찮습니다. 

앞으로 여러분이 배울 영상, 노트, 퀴즈, 과제에서는 상황에 따라 데이터베이스 이름을 테이블 이름 앞에 붙이기도 하고, 붙이지 않기도 할 건데요. 그때그때 상황에 맞게 혼용해서 쓸 거니까 당황하실 필요없이, 어떤 테이블을 가리키는지에만 집중하시면 됩니다. 
--------------------------------------------------------------------------------------------------------------------------------------------------------

*USE copang_main; 은 copang_main이라는 데이터베이스를 사용하겠다고 확실히 선언하는 것입니다. 그리고 그 뒤로는 그냥 테이블 이름만 써도 괜찮습니다. 

*WHERE 쓰는 법들 예시
SELECT * FROM copang_main.member WHERE age >= 20;
SELECT * FROM copang_main.member WHERE age BETWEEN 30 AND 39; -> 30대만 조회 -> BETWEEN A AND B 는 A 부터 B 까지를 의미한다 -> A와 B도 포함된다
SELECT * FROM copang_main.member WHERE age NOT BETWEEN 30 AND 39; -> 30대만 제외하고 조회

*DATE 타입의 WHERE문 용법 예시
SELECT * FROM copang_main.member WHERE sign_up_day >= '2019-01-01';
SELECT * FROM copang_main.member WHERE sign_up_day BETWEEN '2019-01-01' AND '2019-12-31';

*문자열 패턴 매칭
WHERE address LIKE '서울%'; -> address가 서울로 시작하는 모든 로우 조회
WHERE address LIKE '%고양시%'; -> address가 고양시를 포함한 모든 로우 조회
-> %는 임의의 문자열을 의미한다
----------------------------------------------------------------------------------------------------------------------------------------------------------------
1. 같지 않음 (!=, <>)

이전 영상에서는 '같음'을 나타내는 등호(=)를 배웠습니다. 그렇다면 '같지 않음'를 표현하려면 어떻게 해야할까요? != 기호나 <> 기호를 사용하면 됩니다

2. 이 중에 있는~ (IN)

이전 영상에서 우리는 어떤 범위를 나타내기 위해 사용하는 BETWEEN a AND b(a부터 b까지) 구문을 배웠습니다. 그런데 만약 이렇게 연속된 범위 말고, 여러 값들 중에서 해당하는 값이 있는 row들만 추려야할 때도 있는데요. 예를 들어, 현재 회원 중에서 나이가 딱 20살, 또는 딱 30살인 회원들만 조회하려면 어떻게 해야 할까요? 이렇게 써주면 됩니다. 

지금 WHERE age IN (20, 30)은 age 컬럼의 값이 20이거나, 30이어야 한다는 조건을 의미합니다. 결과를 보니 잘 조회되었죠? 이 IN은 상당히 유용하게 사용되는 조건 표현식이니까 잘 기억해두세요. 

3. 한 글자를 나타내는 _ 

이전 영상에서 문자열 패턴 매칭 조건을 배울 때 LIKE 뒤의 ‘%’는 임의의 길이를 가진 문자열(0자도 포함)을 나타낸다고 했습니다. 그런데 %말고 언더바(_) 하나 기호도 있는데요. LIKE 뒤의 언더바 하나는 문자 하나를 나타냅니다. 

잠깐 member 테이블에서 이메일 주소가 c로 시작하고, 그 뒤에 여섯 글자가 있는 row들을 조회해볼까요? 

지금 LIKE 뒤의 'c_____@%' 부분이 이해되시나요? 지금 언더바가 소문자 c 뒤에 5개가 있는 상태인데요. 이 표현식은 c로 시작하고, 그 뒤에 다섯 글자 그리고 골뱅이 하나, 그 뒤에 임의의 길이를 가진 문자열이 있는 문자열 패턴을 나타냅니다. 그리고 이 패턴에 해당하는 문자열인 codeit@naver.com과 cowboy@codeit.kr을 email 주소로 가진 회원들만 잘 조회됐습니다. 
