서브 쿼리
* SQL 문에 부품처럼 들어가는 SELECT 문
* Sub (하위의) Query (데이터베이스에 보내는 요청)
* 서브쿼리를 쓸 때는 괄호로 서브쿼리를 꼭 감싸줘야한다


ex)
SELECT i.id, i.name, AVG(star) AS avg_star
FROM item AS i LEFT OUTER JOIN review AS r
ON r.item_id = i.id
GROUP BY i.id, i.name
HAVING avg_star < (SELECT AVG(star) FROM review)       -> 괄호 안의 부분이 서브쿼리
ORDER BY avg_star DESC;

서브쿼리는 SQL 문 안에 부품처럼 들어있는 “SELECT 문”이라고 했습니다.

(참고로 우리는 이번 챕터에서 여러 종류의 SQL 문 중 SELECT 문을 배웠습니다, SELECT 문은 우리가 배운 것처럼 데이터 조회 및 분석을 위한 SQL 문인데요.

이밖에도 데이터 삽입, 갱신, 삭제를 위한 SQL 문들도 있습니다. 이런 SQL 문들은 곧이은 다른 토픽에서 배우게 될 겁니다. 우리가 아직 배우지 않은 종류의 SQL 문 안에도 서브쿼리가 그 일부로 들어갈 수 있습니다, 참고하세요)

이전 영상에서 쓴 SQL 문을 다시 볼까요? 

지금 전체 SQL 문을 파란 박스, 서브쿼리를 빨간색 박스로 표시했는데요. 이 때 서브쿼리를 포함하는 전체 SQL 문을 outer query(외부 쿼리), 서브쿼리를 inner query(내부 쿼리)라고 하기도 합니다. 

이전 영상에서 서브쿼리를 사용했을 때 어땠나요? 쿼리 창을 새로 켤 필요없이, 하나의 쿼리 창에서 하나의 SQL 문만으로도 원하는 결과를 얻을 수 있었죠? 이렇게 적재적소에 서브쿼리를 사용하면 여러분이 원하는 결과를 좀더 편하게 얻을 수 있습니다. 위 그림을 보면 지금 서브쿼리가 HAVING 절에서 사용됐는데요. 서브쿼리는 HAVING 절 뿐만 아니라 SELECT 절, WHERE 절, FROM 절 등에서도 사용할 수 있습니다. 

서브쿼리의 다양한 사용법을 이번 챕터에서 하나씩 배워봅시다
--------------------------------------------------------------------------------------------------------------------------------

SELECT 절에 있는 서브쿼리

ex)
SELECT 
id, name, price, (SELECT MAX(price) FROM item) AS max_price   -> 나중에 copang_main.item 으로 한번 해보자
FROM copang_main.item;


WHERE 절에 있는 서브쿼리

ex)
SELECT 
id, name, price, (SELECT AVG(price) FROM item) AS avg_price
FROM copang_main.item
WHERE price >= (SELECT AVG(price) FROM item);

ex)
SELECT 
id, name, price, (SELECT AVG(price) FROM item) AS avg_price
FROM copang_main.item
WHERE price = (SELECT MAX(price) FROM item);


* 위의 서브쿼리들은 모두 값 하나만을 리턴하는 서브쿼리들이다
* 서브쿼리가 모두 값 하나만을 리턴하지는 않는다

코팡의 상품들 중에서 리뷰가 최소 3개 이상 달린 상품의 정보만 보려면 어떻게 해야할까?
1. 조인을 이용해서
2. 서브쿼리를 이용해서

ex1)

SELECT *
FROM item AS i LEFT OUTER JOIN review AS r
ON i.id = review.item_id
GROUP BY i.id, i.name
HAVING COUNT(*) > 2;

ex2)

SELECT * FROM item
WHERE id IN
( 
SELECT item_id
FROM review
GROUP BY item_id HAVING COUNT(*) >= 3
);
-> 이 경우 서브 쿼리가 하나의 값만을 리턴하지 않는다
---------------------------------------------------------------------------------------------------------------------------------------------

이전 영상에서는 하나의 column에 여러 개의 row들이 있는 결과를 리턴하는 서브쿼리를 배웠습니다. 그리고 그런 서브쿼리 앞에 아래 그림처럼

IN을 붙여서 유용하게 사용했는데요. IN 말고도 이런 서브쿼리와 함께 유용하게 사용되는 다른 키워드들도 있습니다. 

바로 ANY와 ALL이라는 것인데요. 하나씩 배워볼게요.
1. ANY의 의미

아래 그림을 잠깐 보겠습니다.

지금 codeit_theater라는 테이블에는 id(Primary Key), name(영화 이름), category(영화 장르), month(개봉 월), view_count(총 관객 수) 컬럼이 있습니다.

이 중에서 category의 값이 'Action'인 영화(액션 영화)들의 view_count 컬럼을 볼까요? 

각 액션 영화의 관객 수가 잘 보입니다. 이전 영상에서 봤던 것처럼, 하나의 column에 여러 개의 row들이 있는 결과죠? 이 SELECT 문을 서브쿼리로 사용해보겠습니다. 아래 그림의 노란색 부분이 이 SQL 문을 서브쿼리로 사용한 곳입니다.

그런데 지금 WHERE 절을 자세히 보면 서브쿼리 앞에 ANY라는 키워드가 붙어있습니다.

간단하게 나타내보자면,

WHERE view_count > ANY(서브쿼리) 

이런 식으로 조건이 설정되어 있는데요. 여기서 ANY는 무슨 뜻일까요?

이 조건은 view_count 컬럼의 값이, 방금 전에 봤던 이 결과(서브쿼리가 리턴한 결과) 

에 있는 값(120000, 2300000, 7000000, 8500000) 중 단 하나의(ANY) 값보다도 크다면 True를 리턴합니다. 이 말은 곧, 4개의 값 중에서도 최소값인 120000보다만 큰 값이라면 조건을 만족하게 된다는 뜻이죠.

이 서브쿼리가 사용된 전체 SQL 문의 실행 결과를 다시 보면, view_count가 120000보다 큰 영화들이, 그 중에서도 액션 영화를 제외하고(AND category != 'Action') 조회되었습니다. 

ANY는 우리말로 '~중 하나라도'라는 뜻을 가지는 영어 단어입니다. ANY가 WHERE 절에서 사용될 때는, 서브쿼리의 결과에 있는 각 row의 값들 중 하나라도 조건을 만족하는 경우가 있으면 True를 리턴한다는 뜻입니다. ANY와 같은 기능을 하는 SOME도 있는데요. 아래 그림처럼 ANY 대신 SOME을 사용해도

ANY 때와 같은 결과를 출력하는 걸 알 수 있습니다. SOME은 '어떤 하나의~' 라는 뜻을 가진 영어 단어죠? SOME도 서브쿼리의 결과에 있는 각 row의 값들 중 하나라도 조건을 만족하면 True를 리턴합니다. ANY와 SOME은 같은 기능을 하니까 원하는 것을 골라서 사용하시면 됩니다.
2. ALL의 의미

이번에는 ALL이라는 키워드의 의미를 배워보겠습니다. 방금 전 봤던 SQL 문에서 SOME 부분만 ALL로 바꾸고 실행해보겠습니다.

이번엔 다른 결과가 출력됐는데요. ALL은 '모든~' 이라는 뜻을 갖고 있죠? 그래서 ALL은 모든 경우에 대해서 해당 조건이 성립해야 True를 리턴합니다. 서브쿼리의 실행 결과를 다시 보겠습니다.

ALL이 쓰였다면 view_count 컬럼의 값이 여기 이 4가지 모든 값보다 커야 True가 된다는 뜻이죠. 이 말은 곧, 여기서 최댓값인 8500000보다 커야 True가 된다는 뜻인데요.

결과를 다시 자세히 보면 view_count가 8500000보다 많은 10000000인 ‘여름 왕국’만 결과에 있습니다. ALL이 어떤 기능을 하는지 아시겠죠? 

자, 이번 노트에서는 하나의 column에 여러 row가 있는 결과를 리턴하는 서브쿼리에 붙일 수 있는 ANY(SOME)와 ALL을 배웠습니다. 이 세 가지 단어의 의미를 잘 기억해두시고 필요할 때 유용하게 사용해보세요. 
------------------------------------------------------------------------------------------------------------------------------------

ex)

SELECT * FROM member 

	WHERE SUBSTRING(address, 1, 2) 

=SELECT SUBSTRING(address, 1, 2) FROM member GROUP BY SUBSTRING(address, 1, 2) ORDER BY COUNT(*) DESC LIMIT 1;
---------------------------------------------------------------------------------------------------------------------------------------------------

퀴즈

저는 코팡에서 2020년을 기준으로 생각했을 때, 꽤 오래 전에 등록되었지만 아직까지도 리뷰가 달리고 있는 스테디 셀러 상품들의 리뷰들을 살펴보려고 하는데요. review 테이블에서

(1) '2018년 12월 31일' 이전에 코팡 사이트에 등록된 상품들에 관한 리뷰들만 추려보겠습니다.

(2) 그리고 이때 review 테이블의 모든 컬럼들을 조회하세요.

*조인 말고 서브쿼리를 사용해서 문제를 해결해보세요.

SELECT *
FROM review
WHERE item_id IN 
(SELECT id FROM item WHERE YEAR(registration_date) < 2019);

--------------------------------------------------------------------------------------------------------------------------------------

지금까지 하나의 칼럼에 하나의 로우 또는 여러개의 로우를 리턴하는 서브쿼리들을 다뤘다
다음에는 여러개의 칼럼에 여러개의 로우들을 리턴하는 경우들을 살펴 보자 (테이블 형태)

FROM 절에 있는 서브쿼리

SELECT 
AVG(review_count),
MAX(review_count),
MIN(review_count)
FROM
(SELECT
	SUBSTRING(address, 1, 2) AS region,
	COUNT(*) AS review_count
FROM review AS r LEFT OUTER JOIN member AS m
ON r.mem_id = m.id
GROUP BY SUBSTRING(address, 1, 2)
HAVING 
region IS NOT NULL
AND region != '안드') AS review_count_summary;

-> 괄호 안에 있는 테이블을 derived 테이블이라 한다. FROM 절의 derived 테이블은 항상 alias 를 설정해주어야한다 (안하면 에러)

---------------------------------------------------------------------------------------------------------------------------------

이때까지 다양한 서브쿼리에 대해서 배워봤는데요. 

서브쿼리는 그것이 리턴하는 결과의 형태에 따라 여러 종류로 나눌 수 있습니다. 이때 다양한 종류가 있지만 실무적으로 유용한 3가지 종류를 정리하면 다음과 같습니다. 모두 우리가 배운 내용들입니다. 하나씩 설명할게요. 
1. 단일값을 리턴하는 서브쿼리

예)

하나의 값, 즉, 단일값을 리턴하는 서브쿼리입니다. 단일값은 수학, 물리 분야에서 스칼라(scalar)라고도 하는데요. 그래서 이런 서브쿼리를 스칼라 서브쿼리라고도 합니다. 이런 스칼라 서브쿼리는 SELECT 절에서 하나의 컬럼처럼, WHERE 절에서 =, > 등의 조건 표현식과 비교하는 값으로 쓸 수 있겠죠? 
2. 하나의 column에 여러 row들이 있는 형태의 결과를 리턴하는 서브쿼리 

예)

하나의 column에, 여러 row가 있는 형태의 결과를 리턴하는 서브쿼리입니다. 이런 서브쿼리는 IN, ANY(SOME), ALL 등의 키워드와 함께 쓸 수 있다고 했던 거, 기억나시죠? 
3. 하나의 테이블 형태의 결과(여러 column, 여러 row)를 리턴하는 서브쿼리 

예) 

테이블 형태의 값을 리턴하는 서브쿼리입니다. 이런 서브쿼리로 일시적으로 탄생한 테이블을 derived table이라고 한다고 했죠?(Oracle에서는 inline view라고도 합니다) 이런 서브쿼리로 생겨난 derived table은 마치 원래 있던 테이블인 것처럼 사용하면 됩니다. 대신, derived table에는 alias를 붙여줘야 한다는 규칙이 있습니다. 

자, 서브쿼리를 그 리턴 결과의 종류에 따라 나눠보았는데요. 서브쿼리가 리턴하는 결과의 형태를 잘 예측해야, 에러없이 서브쿼리를 활용할 수 있습니다. 그 정도 수준이 되려면 다양한 상황에서 서브쿼리를 쓰는 연습을 해봐야겠죠? 그리고 각 종류의 서브쿼리와 어떤 키워드들을 함께 쓸 수 있는지도 잘 기억하고 있는 게 좋습니다.
-----------------------------------------------------------------------------------------------------------------------------------------------------------

이전 노트에서는 서브쿼리가 어떤 형식(column, row 수 기준)의 결과를 리턴하는지에 따라 그 종류를 나눠봤습니다. 

그런데 서브쿼리를 그 리턴 결과가 아닌 다른 측면에서도 분류해볼 수 있는데요. 

서브쿼리를 다른 방식으로 분류하는 방법은,

서브쿼리를 

(1) 비상관 서브쿼리와

(2) 상관 서브쿼리로

분류하는 것입니다. 이 내용은 좀 어려우니까 집중해서 읽어보세요.

비상관 서브쿼리가 뭘까요? 잠깐 이전 영상에서 배운 SQL 문을 보고 설명해드릴게요. 

SELECT *
FROM review
WHERE item_id IN 
(SELECT id FROM item WHERE YEAR(registration_date) < 2019);

위 그림을 보시면 WHERE 절에서 서브쿼리가 사용되고 있는데요. 이 서브쿼리는 지금 그 자체만으로도 실행이 가능한 서브쿼리입니다. 따라서 이 서브쿼리만 빼서 아래 그림처럼 별도로 실행을 해봐도 

잘 실행됩니다. 이것은 이 서브쿼리가 그것을 둘러싼 outer query와 별개로, 독립적으로 실행되기 때문에 그런 겁니다. 이렇게 outer query와 상관 관계가 없는 서브쿼리를 비상관 서브쿼리라고 합니다. 이때까지 우리가 배운 서브쿼리들이 모두 비상관 서브쿼리에 해당합니다. 

그렇다면 상관 서브쿼리는 무엇일까요? 상관 서브쿼리는 우리가 지금 새롭게 배워야할 종류의 서브쿼리입니다. 상관 서브쿼리란 outer query와 상관 관계가 있는 서브쿼리를 말하는데요. 아래 예시와 함께 설명할게요. 

SELECT * FROM item
WHERE EXISTS (SELECT * FROM review WHERE review.item_id = item.id);

지금 이 그림을 보면 WHERE 절에 서브쿼리가 하나 쓰였습니다. 그리고 그 앞에 EXISTS라는 처음 보는 단어가 있는데요. EXISTS의 의미는 곧 바로 설명할게요. 일단 지금 서브쿼리의 뒷 부분을 보면 item이라는 테이블 이름이 있다는 것을 알 수 있습니다. 그런데 여기서 신기한 사실은 item 테이블의 이름이 서브쿼리의 FROM 절에 있는 게 아니라 outer query에 있다는 점인데요. 주황색 강조 처리된 두 개의 item이라는 테이블 이름을 보세요. 

지금 서브쿼리가 필요로 하는 item 테이블이 outer query에 적혀있기 때문에 이 서브쿼리는 방금 전 '비상관 서브쿼리' 때와는 달리 단독으로 실행되지 못합니다. 잠깐 이 서브쿼리만 별도로 빼서 실행해보면, 

방금 전의 비상관 서브쿼리와는 달리 실행에 실패합니다. item이라는 테이블 이름이 지금 FROM 절에 없기 때문에 당연한 겁니다. 

이렇게 서브쿼리가 outer query에 적힌 테이블 이름 등과 상관 관계를 갖고 있어서 그 단독으로는 실행되지 못하는 서브쿼리를 상관 서브쿼리라고 합니다. 

그렇다면 지금 

이 SQL 문 전체는 무슨 뜻일까요? 하나씩 해석해볼게요. 

이 SQL 문의 최종 조회 결과를 하나의 바구니라고 생각해봅시다.

그리고 시작할게요. 

(1) 일단 item 테이블의 첫 번째 row를 생각합시다. 

(2) 그 row의 id(item.id) 값과 같은 값을 item_id(review.item_id) 컬럼에 가진 review 테이블의 row(가/들이) 있는지 조회합니다. 

(3) 만약에 존재하면(EXISTS의 의미가 바로 이것입니다!, exist는 우리말로 '존재하다'라는 뜻입니다)

(4) WHERE 절은 True가 되고, (1)에서 생각했던 item 테이블의 row는 최종 조회 결과 바구니에 담깁니다.

이제 item 테이블의 두 번째 row에 대해서 (2) ~ (4)의 과정을 반복합니다. → 세 번째 row에 대해서 (2) ~ (4)의 과정을 반복합니다.

→ item 테이블의 마지막 row까지 (2) ~ (4)의 과정을 반복합니다. 

이렇게 되면 item 테이블 중에서 그 id 컬럼 값이 review 테이블의 item_id 컬럼에 존재하는 row들만 추려지겠죠? 이 말을 조금 바꿔서 말하면 상품들 중에서 리뷰가 달린 상품들만 조회한 것입니다. 상관 서브쿼리가 뭔지 조금 감이 오시나요?

이것과 정 반대로 아직 리뷰가 달리지 않은 상품들만 조회하는 방법도 있습니다. 아래 그림과 같이 EXISTS 대신 NOT EXISTS를 사용하면 됩니다. 

NOT EXISTS는 EXISTS와 정반대 의미로, 위에서 설명한 단계들에서 ‘(3)번 만약에 존재한다면’을 ‘(3)번 만약에 존재하지 않는다면’으로 바꾸고 생각하시면 됩니다. NOT EXISTS를 사용하니 리뷰가 달리지 않은 상품들만 잘 조회되었습니다. 

상관 서브쿼리가 뭔지, 상관 서브쿼리에서 사용되는 EXISTS, NOT EXISTS의 의미가 뭔지 이해되시나요? 

EXIST, NOT EXISTS는 상관 서브쿼리와 함께 자주 사용되는 키워드이기 때문에 그 의미를 잘 기억해두시는 게 좋습니다. 

하지만 상관 서브쿼리라고 해서 꼭 EXISTS, NOT EXISTS 같은 키워드를 써야만 하는 건 아닙니다. 잠깐 아래 그림을 보세요. 상관 서브쿼리로 이런 것도 할 수 있습니다.

지금 저는 member 테이블을 조회하면서, 같은 해에 태어난 회원들 중 가장 작은 키를 가진 회원의 키 정보를 담은 컬럼을 오른쪽 끝에 추가해서 보려고 하는데요. 방금 전에 배운 상관 서브쿼리의 해석 방법대로 아래 SQL 문을 해석해보세요.

SELECT *,
(SELECT MIN(height)
FROM member AS m2 
WHERE birthday IS NOT NULL AND height IS NOT NULL
AND YEAR(m1.birthday) = YEAR(m2.birthday)) AS min_height_in_the_year
FROM member AS m1
ORDER BY min_height_in_the_year ASC;

지금 보면 member 테이블 하나를 갖고 마치 이전에 배운 SELF JOIN 같은 작업을 처리하고 있다는 걸 알 수 있습니다.

혹시 해석이 바로 안 되시는 분들을 위해 이미지에 있는 번호대로 하나씩 설명해드릴게요.

1번 : 일단 birthday 컬럼과 height 컬럼에 둘다 값이 있는 회원들만 대상으로 해야하기 때문에 이런 조건을 걸었습니다. 

그 다음 member 테이블의 첫 번째 row를 생각합시다. 

2번 : 그 row에 대해서 같은 YEAR(birthday) ('생일연도') 값을 가진 row(를/들을) 찾습니다.

3번 : 그 다음 해당 row(의/들의) height 컬럼의 최솟값을 구합니다. 

member 테이블의 두 번째 row를 생각하고, 2~3번을 수행합니다. 

member 테이블의 세 번째 row를 생각하고 ,2~3번을 수행합니다. 

… 

이런 식으로 구하다 보면 특정 회원과 같은 해에 태어난 사람들 중 가장 작은 키를 가진 사람의 키를 마지막 컬럼에서 볼 수 있습니다. 

위 결과를 보면 같은 해에 태어난 회원들은 min_height_in_the_year라는 컬럼에서 모두 같은 값을 갖고 있는 것을 확인할 수 있습니다.

자, 상관 서브쿼리는 처음 배울 때는 조금 어려울 수도 있는 개념입니다. 위 내용을 이해될 때까지 반복해서 읽어보세요. 

참고로 비상관 서브쿼리는 영어로 Non-correlated Subquery, 상관 서브쿼리는 영어로 Correlated Subquery라고 합니다.

---------------------------------------------------------------------------------------------------------------

리뷰가 있는 상품들의 가격 중에서

최대 가격 / 리뷰의 평균 별점 / 리뷰를 남긴 고유한 회원 이메일의 수

를 구하려고 하는데요.

일단은

(1) 이 세 테이블을 모두 이너 조인(inner join)하고, 거기서 price, star, email 컬럼만 조회하세요.

(2) 그 SELECT 문을 derived table로 활용해보세요.

(3) 그리고 derived table에는 copang_report(코팡 보고서)라는 alias를 붙여주세요. 

(4) 조회하는 컬럼은 다음과 같은 3가지 컬럼일 텐데요. 각 컬럼에 아래와 같은 alias를 붙여주세요.

1) MAX(copang_report.price) → max_price

2) AVG(copang_report.star) → avg_star

3) COUNT(DISTINCT(copang_report.email)) → distinct_email_count 


SELECT 
MAX(copang_report.price) AS max_price,
AVG(copang_report.star) AS avg_star,
COUNT(DISTINCT(copang_report.email)) AS distinct_email_count
FROM
(SELECT price, star, email
FROM item AS i INNER JOIN review AS r
ON i.id = r.item_id INNER JOIN member AS m
ON m.id = r.mem_id) AS copang_report;
------------------------------------------------------------------------------------------------------------------------------
자, 이제 우리는 서브쿼리(Subquery)에 대해서 어느 정도 배웠습니다. 그런데 여기서 잠시 고민해볼 문제가 하나 있는데요. 예시를 들어서 설명할게요.

잠깐 아래 SQL 문을 보세요.

SELECT id, name, (SELECT inventory_count FROM stock WHERE item.id = stock.item_id)
FROM item;

이 SQL 문은 지금 3개의 컬럼을 조회하고 있습니다.

(1) item 테이블의 id 컬럼,

(2) item 테이블의 name 컬럼,

(3) stock 테이블의 inventory_count 컬럼

이렇게 3개입니다.

item 테이블은 코팡의 상품 정보 테이블, stock 테이블은 각 상품의 재고 정보 테이블이었던 거, 기억나시죠?

지금 보면 마지막 3번째 컬럼은 서브쿼리로 표현되었다는 걸 알 수 있습니다. 그리고 좀더 생각해보면 이건 이전 노트에서 배운 상관 서브쿼리(Correlated Subquery)입니다. 상관 서브쿼리를 해석하는 방법, 기억나시나요? 지금 3번째 컬럼을 나타내는 서브쿼리를 해석해볼게요.

(a) 일단 item 테이블의 첫 번째 row를 생각합니다.

(b) 그 row의 id 컬럼의 값과 같은 값을 item_id 컬럼에 가진 stock 테이블의 row를 찾습니다.

(c) 찾은 stock 테이블의 row의 inventory_count 컬럼의 값을 리턴합니다.

그리고 item 테이블의 두 번째 row, 세 번째 row.. 순으로 (b), (c)의 단계를 반복하면 되는데요. 이렇게 하면 item 테이블의 각 상품에 알맞은 재고 수(inventory_count) 값을 매칭시킬 수 있습니다.

그런데 사실 위 결과는 우리가 챕터 5에서 배웠던 조인(join)만으로도 충분히 해결할 수 있습니다. 아래 SQL 문을 보면,

SELECT i.id, i.name, s.inventory_count
FROM item AS i LEFT OUTER JOIN stock AS s
ON item.id = stock.item_id;

조인을 통해서도 똑같은 결과를 조회할 수 있습니다.

그럼 과연 상관 서브쿼리와 조인, 이 둘 중에서 무엇을 써야할까요? 정답은 없습니다. 데이터를 분석할 때는 여러분이 더 익숙하고 직관적으로 이해할 수 있는 것을 선택하면 되는데요.

하지만 만약 테이블에 아주 많은 수의 row들이 있을 때는 이 두 가지 방법 간에 속도 차이가 날 수도 있습니다. 특히 SQL 문으로 데이터 조회 코드를 짜는 개발자의 경우에는 이런 부분까지도 신경써야 하죠. 지금 중요한 내용은 아니니까 자세한 설명은 생략할게요.  

일단은 SQL에서 같은 결과를 얻기 위해서 여러 방법을 활용할 수 있다는 사실을 기억하고 넘어가시면 좋습니다.
