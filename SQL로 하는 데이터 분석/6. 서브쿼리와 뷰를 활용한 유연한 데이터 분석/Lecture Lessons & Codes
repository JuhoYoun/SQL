서브 쿼리
* SQL 문에 부품처럼 들어가는 SELECT 문
* Sub (하위의) Query (데이터베이스에 보내는 요청)
* 서브쿼리를 쓸 때는 괄호로 서브쿼리를 꼭 감싸줘야한다


ex)
SELECT i.id, i.name, AVG(star) AS avg_star
FROM item AS i LEFT OUTER JOIN review AS r
ON r.item_id = i.id
GROUP BY i.id, i.name
HAVING avg_star < (SELECT AVG(star) FROM review)       -> 괄호 안의 부분이 서브쿼리
ORDER BY avg_star DESC;

서브쿼리는 SQL 문 안에 부품처럼 들어있는 “SELECT 문”이라고 했습니다.

(참고로 우리는 이번 챕터에서 여러 종류의 SQL 문 중 SELECT 문을 배웠습니다, SELECT 문은 우리가 배운 것처럼 데이터 조회 및 분석을 위한 SQL 문인데요.

이밖에도 데이터 삽입, 갱신, 삭제를 위한 SQL 문들도 있습니다. 이런 SQL 문들은 곧이은 다른 토픽에서 배우게 될 겁니다. 우리가 아직 배우지 않은 종류의 SQL 문 안에도 서브쿼리가 그 일부로 들어갈 수 있습니다, 참고하세요)

이전 영상에서 쓴 SQL 문을 다시 볼까요? 

지금 전체 SQL 문을 파란 박스, 서브쿼리를 빨간색 박스로 표시했는데요. 이 때 서브쿼리를 포함하는 전체 SQL 문을 outer query(외부 쿼리), 서브쿼리를 inner query(내부 쿼리)라고 하기도 합니다. 

이전 영상에서 서브쿼리를 사용했을 때 어땠나요? 쿼리 창을 새로 켤 필요없이, 하나의 쿼리 창에서 하나의 SQL 문만으로도 원하는 결과를 얻을 수 있었죠? 이렇게 적재적소에 서브쿼리를 사용하면 여러분이 원하는 결과를 좀더 편하게 얻을 수 있습니다. 위 그림을 보면 지금 서브쿼리가 HAVING 절에서 사용됐는데요. 서브쿼리는 HAVING 절 뿐만 아니라 SELECT 절, WHERE 절, FROM 절 등에서도 사용할 수 있습니다. 

서브쿼리의 다양한 사용법을 이번 챕터에서 하나씩 배워봅시다
--------------------------------------------------------------------------------------------------------------------------------

SELECT 절에 있는 서브쿼리

ex)
SELECT 
id, name, price, (SELECT MAX(price) FROM item) AS max_price   -> 나중에 copang_main.item 으로 한번 해보자
FROM copang_main.item;


WHERE 절에 있는 서브쿼리

ex)
SELECT 
id, name, price, (SELECT AVG(price) FROM item) AS avg_price
FROM copang_main.item
WHERE price >= (SELECT AVG(price) FROM item);

ex)
SELECT 
id, name, price, (SELECT AVG(price) FROM item) AS avg_price
FROM copang_main.item
WHERE price = (SELECT MAX(price) FROM item);


* 위의 서브쿼리들은 모두 값 하나만을 리턴하는 서브쿼리들이다
* 서브쿼리가 모두 값 하나만을 리턴하지는 않는다

코팡의 상품들 중에서 리뷰가 최소 3개 이상 달린 상품의 정보만 보려면 어떻게 해야할까?
1. 조인을 이용해서
2. 서브쿼리를 이용해서

ex1)

SELECT *
FROM item AS i LEFT OUTER JOIN review AS r
ON i.id = review.item_id
GROUP BY i.id, i.name
HAVING COUNT(*) > 2;

ex2)

SELECT * FROM item
WHERE id IN
( 
SELECT item_id
FROM review
GROUP BY item_id HAVING COUNT(*) >= 3
);
-> 이 경우 서브 쿼리가 하나의 값만을 리턴하지 않는다
---------------------------------------------------------------------------------------------------------------------------------------------

이전 영상에서는 하나의 column에 여러 개의 row들이 있는 결과를 리턴하는 서브쿼리를 배웠습니다. 그리고 그런 서브쿼리 앞에 아래 그림처럼

IN을 붙여서 유용하게 사용했는데요. IN 말고도 이런 서브쿼리와 함께 유용하게 사용되는 다른 키워드들도 있습니다. 

바로 ANY와 ALL이라는 것인데요. 하나씩 배워볼게요.
1. ANY의 의미

아래 그림을 잠깐 보겠습니다.

지금 codeit_theater라는 테이블에는 id(Primary Key), name(영화 이름), category(영화 장르), month(개봉 월), view_count(총 관객 수) 컬럼이 있습니다.

이 중에서 category의 값이 'Action'인 영화(액션 영화)들의 view_count 컬럼을 볼까요? 

각 액션 영화의 관객 수가 잘 보입니다. 이전 영상에서 봤던 것처럼, 하나의 column에 여러 개의 row들이 있는 결과죠? 이 SELECT 문을 서브쿼리로 사용해보겠습니다. 아래 그림의 노란색 부분이 이 SQL 문을 서브쿼리로 사용한 곳입니다.

그런데 지금 WHERE 절을 자세히 보면 서브쿼리 앞에 ANY라는 키워드가 붙어있습니다.

간단하게 나타내보자면,

WHERE view_count > ANY(서브쿼리) 

이런 식으로 조건이 설정되어 있는데요. 여기서 ANY는 무슨 뜻일까요?

이 조건은 view_count 컬럼의 값이, 방금 전에 봤던 이 결과(서브쿼리가 리턴한 결과) 

에 있는 값(120000, 2300000, 7000000, 8500000) 중 단 하나의(ANY) 값보다도 크다면 True를 리턴합니다. 이 말은 곧, 4개의 값 중에서도 최소값인 120000보다만 큰 값이라면 조건을 만족하게 된다는 뜻이죠.

이 서브쿼리가 사용된 전체 SQL 문의 실행 결과를 다시 보면, view_count가 120000보다 큰 영화들이, 그 중에서도 액션 영화를 제외하고(AND category != 'Action') 조회되었습니다. 

ANY는 우리말로 '~중 하나라도'라는 뜻을 가지는 영어 단어입니다. ANY가 WHERE 절에서 사용될 때는, 서브쿼리의 결과에 있는 각 row의 값들 중 하나라도 조건을 만족하는 경우가 있으면 True를 리턴한다는 뜻입니다. ANY와 같은 기능을 하는 SOME도 있는데요. 아래 그림처럼 ANY 대신 SOME을 사용해도

ANY 때와 같은 결과를 출력하는 걸 알 수 있습니다. SOME은 '어떤 하나의~' 라는 뜻을 가진 영어 단어죠? SOME도 서브쿼리의 결과에 있는 각 row의 값들 중 하나라도 조건을 만족하면 True를 리턴합니다. ANY와 SOME은 같은 기능을 하니까 원하는 것을 골라서 사용하시면 됩니다.
2. ALL의 의미

이번에는 ALL이라는 키워드의 의미를 배워보겠습니다. 방금 전 봤던 SQL 문에서 SOME 부분만 ALL로 바꾸고 실행해보겠습니다.

이번엔 다른 결과가 출력됐는데요. ALL은 '모든~' 이라는 뜻을 갖고 있죠? 그래서 ALL은 모든 경우에 대해서 해당 조건이 성립해야 True를 리턴합니다. 서브쿼리의 실행 결과를 다시 보겠습니다.

ALL이 쓰였다면 view_count 컬럼의 값이 여기 이 4가지 모든 값보다 커야 True가 된다는 뜻이죠. 이 말은 곧, 여기서 최댓값인 8500000보다 커야 True가 된다는 뜻인데요.

결과를 다시 자세히 보면 view_count가 8500000보다 많은 10000000인 ‘여름 왕국’만 결과에 있습니다. ALL이 어떤 기능을 하는지 아시겠죠? 

자, 이번 노트에서는 하나의 column에 여러 row가 있는 결과를 리턴하는 서브쿼리에 붙일 수 있는 ANY(SOME)와 ALL을 배웠습니다. 이 세 가지 단어의 의미를 잘 기억해두시고 필요할 때 유용하게 사용해보세요. 
------------------------------------------------------------------------------------------------------------------------------------

ex)

SELECT * FROM member 

	WHERE SUBSTRING(address, 1, 2) 

=SELECT SUBSTRING(address, 1, 2) FROM member GROUP BY SUBSTRING(address, 1, 2) ORDER BY COUNT(*) DESC LIMIT 1;
---------------------------------------------------------------------------------------------------------------------------------------------------

퀴즈

저는 코팡에서 2020년을 기준으로 생각했을 때, 꽤 오래 전에 등록되었지만 아직까지도 리뷰가 달리고 있는 스테디 셀러 상품들의 리뷰들을 살펴보려고 하는데요. review 테이블에서

(1) '2018년 12월 31일' 이전에 코팡 사이트에 등록된 상품들에 관한 리뷰들만 추려보겠습니다.

(2) 그리고 이때 review 테이블의 모든 컬럼들을 조회하세요.

*조인 말고 서브쿼리를 사용해서 문제를 해결해보세요.

SELECT *
FROM review
WHERE item_id IN 
(SELECT id FROM item WHERE YEAR(registration_date) < 2019);

--------------------------------------------------------------------------------------------------------------------------------------

지금까지 하나의 칼럼에 하나의 로우 또는 여러개의 로우를 리턴하는 서브쿼리들을 다뤘다
다음에는 여러개의 칼럼에 여러개의 로우들을 리턴하는 경우들을 살펴 보자 (테이블 형태)

FROM 절에 있는 서브쿼리

SELECT 
AVG(review_count),
MAX(review_count),
MIN(review_count)
FROM
(SELECT
	SUBSTRING(address, 1, 2) AS region,
	COUNT(*) AS review_count
FROM review AS r LEFT OUTER JOIN member AS m
ON r.mem_id = m.id
GROUP BY SUBSTRING(address, 1, 2)
HAVING 
region IS NOT NULL
AND region != '안드') AS review_count_summary;

-> 괄호 안에 있는 테이블을 derived 테이블이라 한다. FROM 절의 derived 테이블은 항상 alias 를 설정해주어야한다 (안하면 에러)

---------------------------------------------------------------------------------------------------------------------------------

이때까지 다양한 서브쿼리에 대해서 배워봤는데요. 

서브쿼리는 그것이 리턴하는 결과의 형태에 따라 여러 종류로 나눌 수 있습니다. 이때 다양한 종류가 있지만 실무적으로 유용한 3가지 종류를 정리하면 다음과 같습니다. 모두 우리가 배운 내용들입니다. 하나씩 설명할게요. 
1. 단일값을 리턴하는 서브쿼리

예)

하나의 값, 즉, 단일값을 리턴하는 서브쿼리입니다. 단일값은 수학, 물리 분야에서 스칼라(scalar)라고도 하는데요. 그래서 이런 서브쿼리를 스칼라 서브쿼리라고도 합니다. 이런 스칼라 서브쿼리는 SELECT 절에서 하나의 컬럼처럼, WHERE 절에서 =, > 등의 조건 표현식과 비교하는 값으로 쓸 수 있겠죠? 
2. 하나의 column에 여러 row들이 있는 형태의 결과를 리턴하는 서브쿼리 

예)

하나의 column에, 여러 row가 있는 형태의 결과를 리턴하는 서브쿼리입니다. 이런 서브쿼리는 IN, ANY(SOME), ALL 등의 키워드와 함께 쓸 수 있다고 했던 거, 기억나시죠? 
3. 하나의 테이블 형태의 결과(여러 column, 여러 row)를 리턴하는 서브쿼리 

예) 

테이블 형태의 값을 리턴하는 서브쿼리입니다. 이런 서브쿼리로 일시적으로 탄생한 테이블을 derived table이라고 한다고 했죠?(Oracle에서는 inline view라고도 합니다) 이런 서브쿼리로 생겨난 derived table은 마치 원래 있던 테이블인 것처럼 사용하면 됩니다. 대신, derived table에는 alias를 붙여줘야 한다는 규칙이 있습니다. 

자, 서브쿼리를 그 리턴 결과의 종류에 따라 나눠보았는데요. 서브쿼리가 리턴하는 결과의 형태를 잘 예측해야, 에러없이 서브쿼리를 활용할 수 있습니다. 그 정도 수준이 되려면 다양한 상황에서 서브쿼리를 쓰는 연습을 해봐야겠죠? 그리고 각 종류의 서브쿼리와 어떤 키워드들을 함께 쓸 수 있는지도 잘 기억하고 있는 게 좋습니다.
-----------------------------------------------------------------------------------------------------------------------------------------------------------



