
이전 챕터에서 우리는 코드잇에서 ‘코팡’이라는 의류 쇼핑몰을 운영한다고 가정했습니다. 그리고 ‘코팡’을 위한 copang_main이라는 데이터베이스를 생성했는데요. 이제 copang_main 데이터베이스 안에 테이블을 하나 생성해보겠습니다.

테이블을 생성하는 방법에는 크게 2가지가 있습니다. 

첫 번째는 SQL 문으로 생성하는 방법입니다. 그런데 이번 토픽에서는 테이블을 생성하는 SQL 문은 배우지 않습니다. 이번 토픽은

'데이터베이스와 테이블이 이미 존재하고, 그 안에 데이터도 이미 저장된 상황을' 가정하고 데이터를 분석하는 것에 집중해서 진행됩니다.

일단 이번 토픽에서 기존 데이터를 분석하는 방법을 최대한 자세하게 배우고, 나중 토픽에서 테이블을 생성하는 SQL 문도 배울 거니까 걱정하지 마세요. 

테이블을 만드는 두 번째 방법은 CSV 파일을 임포트(import)해서 테이블로 만드는 것입니다.

우리는 이 방법을 사용할 건데요. 

일단 이 노트에 첨부된 member-data.csv 파일을 일단 다운로드받으세요. 지금 확장자가 .csv로 끝나죠? 이런 파일을 CSV 파일이라고 하는데요. CSV는 Comma Separated Values의 약자로, 모든 값들이 콤마(,)로 구분된 형식의 내용을 가진 파일을 말합니다. 아마 엑셀을 자주 사용하는 분이라면 익숙한 형식의 파일일 겁니다. 실제로 member-data.csv 파일을 열어보면 

이렇게 모든 값이 콤마로 구분된 것을 볼 수 있습니다. 지금 member-data.csv 파일에는 코팡의 회원 정보가 담겨있는데요. 지금 가장 첫 번째 줄을 보면 id, email, age, … 와 같은 컬럼 이름들이 보입니다. CSV 파일에는 보통 이렇게 가장 첫 번째 줄에 컬럼 이름들이 적혀있습니다. 

Workbench에는 CSV 파일을 그대로 테이블로 만들어주는 기능이 있는데요. 이 기능을 사용해셔 member-data.csv 파일로 member라는 이름의 테이블을 생성해보겠습니다. 다음 내용을 순서대로 따라해보세요. 

* 만약 아래 과정 진행 중 오류가 발생한다면 직접 쿼리를 통해 데이터를 넣을 수 있도록 여기를 클릭해주세요.

1> copang_main 데이터베이스 이름에 커서를 대고 마우스 오른쪽 버튼을 누르세요. 그 다음 뜨는 팝업에서 ‘Table Data Import Wizard’를 클릭하세요.

2> 그럼 아래와 같은 창이 뜹니다. 빨간 박스 속 문장을 해석하면 CSV 파일을 임포트해서 바로 테이블로 만들 수 있다는 뜻인데요. 일단 Browse 버튼을 클릭하세요.

3> 그 다음 방금 전에 다운로드 받은 member-data.csv 파일을 선택하고, Open 버튼을 클릭하세요.  

4> 파일 경로가 설정된 걸 확인하고 Next 버튼을 누르세요. 

5> 그럼 이제 이 CSV 파일로 생성할 테이블의 이름을 설정하는 창이 뜹니다. 테이블 이름은 member라고 할 건데요. 지금 파일 이름인 member-data가 기본 세팅되어 있네요.

이걸 member로 수정하고 Next 버튼을 클릭하세요. 

6> 그 다음 뜨는 창에서 아래와 같은 스패너 모양 아이콘을 클릭하고,

Field Separator(컬럼 구분자) 부분의 기호를 ,(콤마) 표시로 바꿔주시고 Next 버튼을 눌러주세요

7> 그럼 CSV 파일에 있던 각 컬럼명이 잘 인식되는 것을 확인할 수 있습니다. 창의 크기를 우측 하단 방향으로 크게 늘리면 아랫부분에 어떤 모양의 테이블이 생길지 간단하게 살펴볼 수 있는 부분이 보입니다.

지금 각각의 컬럼 오른쪽에 int, text 같은 것들이 써있는데요. 이런 것들은 각 컬럼에 어떤 형식(숫자, 문자열)의 값이 들어갈 수 있는지를 나타냅니다. 이걸 Field Type 또는 Data Type이라고 합니다. 이 부분은 다음 영상에서 자세하게 설명할 건데요. 일단 int는 정수형, text는 문자열형을 나타낸다는 것만 알아두세요.

8> 그런데 지금 각 컬럼들을 자세히 보면, height(키) 컬럼의 데이터 타입은 text인데 weight(몸무게) 컬럼의 타입은 double로 되어있습니다. double은 실수형 데이터 타입으로 소수점이 필요한 숫자를 담을 수 있는 데이터 타입입니다. 예를 들어 키는 182.3, 몸무게는 72.4 이런 식으로 소수점이 필요한 값들도 존재하기 때문에 그 데이터 타입이 double이어야 합니다. 지금 weight 컬럼은 데이터 타입이 double로 되어있는데, height 컬럼은 데이터 타입이 text죠? height 컬럼의 데이터 타입을 Workbench가 잘못 추론한 것 같습니다. height 컬럼도 weight 컬럼처럼 그 데이터 타입을 double로 바꾸겠습니다.

height 컬럼의 데이터 타입 부분을 클릭하고 

double을 클릭하세요. 

그리고 Next 버튼을 눌러서 넘어가면 됩니다.

9> 그 다음 화면에서도 Next 버튼을 누르세요.

10> 작업이 완료되면 또 Next를 누르세요. 

 11> member 테이블 생성이 완료되었습니다! 아래 그림에 보이는 copang_main.member는

(1) copang_main 데이터베이스의

(2) member 테이블이라는 뜻이라는 거

이전에 설명했죠? Finish 버튼을 누르세요. 

12> 그 다음 SCHEMAS 탭의 새로고침 버튼을 클릭하면, 

Tables 왼쪽에 화살표가 생깁니다. Tables를 더블클릭하면 생성된 member 테이블이 보입니다. 


여기까지 하신 분은 이 상태에서 다음 영상을 들으시면 됩니다. 

자, 이번 노트에서는 CSV 파일로 테이블을 생성하는 방법을 배웠는데요. 이 과정은 곧 나중 챕터에서 또 반복해야할 과정이기 때문에 잘 기억해두시는 게 좋습니다. 그 때는 별도의 설명없이 이 노트의 주소를 링크로 두고 진행할 예정입니다.

CSV 파일은 데이터 분석 분야에서 아주 흔하게 사용되는 파일의 형식입니다. 그리고 현재 많은 회사들이 사용하는 엑셀(Excel)에는 저장된 데이터를 CSV 파일로 추출할 수 있는 기능이 있는데요.

이 말은 곧

    엑셀 파일 -> CSV 파일 -> 테이블

이런 식의 변환을 통해 엑셀 파일로 존재하던 데이터를 SQL로 분석할 수 있다는 뜻이기도 합니다. 이번 토픽의 내용을 잘 듣고나서, 나중에 엑셀 파일을 SQL로 분석해보는 것도 좋겠죠?

-------------------------------------------------------------------------------------------------------------------------------------------------------------
*schemas tab -> table -> member table 에 커서를 갖다 대면 오른쪽에 아이콘이 세개 생긴다 -> 랜치 아이콘을 클릭하면 칼럼 정보를 볼 수 있고 Primay Key 도 공식적으로 설정가능하다. (pk 체크)
*Primary Key : 테이블에서 하나의 row를 고유하게 식별할 수 있도록 해주는 column
*pk 박스에 체크를 옆에 키모양 아이콘이 생긴다 또 nn도 같이 체크된다 왜? -> 그리고 apply를 클릭하면 해당 칼럼을 테이블의 primary key로 지정한다는 SQL문이 뜬다. -> apply 다시 클릭하면 적용된다

--------------------------------------------------------------------------------------------------------------------------------------------------------------
이전 영상에서 저는 member 테이블의 id 컬럼을 'member 테이블의 Primary Key'로 지정했습니다. 아마 여러분이 실무 현장에서 만나게 될 각 테이블에는 대부분 이런 Primary Key가 이미 설정되어 있을 겁니다.(꼭 모든 테이블에 Primary Key가 있어야 하는 것은 아니지만, 특별한 경우가 아닌 이상 일반적으로 테이블에는 Primary Key가 존재하는 것이 바람직합니다.)

이전 영상에서 말한 대로 이런 Primary Key는 테이블에서 특정 row 하나를 식별하는 역할을 합니다. 특정 컬럼을 Primary Key로 설정하면 Primary Key에 같은 값이 있는 row가 추가되는 것을 DBMS가 자동으로 막아주기 때문에 중복된 row가 생길 위험성이 사라집니다. 

이런 Primary Key는 당연히 특정 row를 고유하게 나타낼 수 있는 값을 가진 컬럼으로 설정해야겠죠?

Primary Key의 종류에는 크게 두 가지가 있습니다. 바로 Natural Key와 Surrogate Key인데요. 각각 무엇인지 살펴봅시다. 
1. Natural Key

실제로 어떤 개체가 갖고 있는 속성을 나타내는 컬럼이 Primary Key가 됐을 때 이를 Natural Key라고 합니다. 사람은 주민등록번호로 특정 인물을 식별할 수 있습니다. 우리가 읽는 책은 ISBN이라고 하는 번호로 특정할 수 있구요. 바로 이런 속성을 나타내는 컬럼이 Primary Key가 되면 Natural Key라고 합니다.

현재 우리의 member 테이블에서는 email 컬럼이 각 회원을 식별할 수 있는 실제 속성입니다. 만약 제가 id 컬럼 말고 email 컬럼을 Primary Key로 설정했다면 Primary Key가 Natural Key인 겁니다. 하지만 저는 email 컬럼말고 id 컬럼을 Primary Key로 설정했는데요. 이에 대한 설명을 바로 이어서 할게요.
2. Surrogate Key

이건 제가 설정했던 id 컬럼같은 Primary Key를 의미합니다. 사실 id 컬럼은 어떤 회원의 속성을 직접적으로 나타내는 컬럼은 아닙니다. 단지 제가 Primary Key로 사용하기 위해 인위적으로 생성한 컬럼이죠. 이렇게 어떤 개체의 실제 속성은 아니지만 Primary Key로 쓰기 위해 추가한 컬럼을 Surrogate Key라고 합니다. 이런 Surrogate Key에는 주로 1부터 순차적으로 증가하는 숫자가 들어가게 됩니다. 잠깐 다시 member 테이블의 id 컬럼을 볼까요?

이렇게 id 컬럼에 1부터 시작해서 순차적으로 증가하는 값이 적혀있죠? 이 상태에서는 id 컬럼의 값으로 특정 row를 식별할 수 있으니 당연히 Primary Key의 역할을 할 수 있습니다.

그럼 Natural Key와 Surrogate Key 중에 어느 것이 더 좋을까요? 정답은 없습니다. 각 상황마다 적절한 키가 달라지는데 이것은 데이터베이스에 관해 깊게 공부하고 나서야 이해할 수 있는 부분이기 때문에 생략하겠습니다. 하지만 Natural Key는 그 값이 나중에 변경되면 모든 row의 값을 다시 수정해줘야 한다는 문제 등(가능성은 낮지만 사람의 주민등록번호가 변경되는 경우가 생길 수도 있겠죠?)이 있기 때문에 보통은 Surrogate Key를 선택하는 경우가 더 많습니다.

일단은 Primary Key의 종류에 크게 2가지가 있다는 것을 기억하고, 실무에서 만나게 될 테이블의 Primary Key가 이 2가지 중 어디에 해당하는지만 구분할 수 있으면 충분합니다.
--------------------------------------------------------------------------------------------------------------------------------------------------------
